{"title":"MYSQL优化面试","uid":"8c8767142f7e95355e375b07bd636def","slug":"SQL","date":"2022-05-14T12:18:53.378Z","updated":"2022-05-14T12:27:51.990Z","comments":true,"path":"api/articles/SQL.json","keywords":null,"cover":[],"content":"<p>MySQL架构流程</p>\n<p><img src=\"/post/SQL/image-20220512201624346.png\" alt=\"image-20220512201624346\"></p>\n<p>经历了四层</p>\n<p>1 Connector JDBC odbc</p>\n<p>2 Server (Query Cache &#x2F; Buffer, Parser, Optimizer…)</p>\n<p>3 Storage (InnoDB MyISAM Memory)</p>\n<p>4File (Row Data, Redo Undo Binlog …)放在.frm .ibd</p>\n<p>QueryCache 不好用 已弃用</p>\n<p>以字符串的形式匹配 命中率低 数据更新时会大量失效</p>\n<p>替代： Buffer Pool</p>\n<p>解析器： Parser</p>\n<p><img src=\"/post/SQL/image-20220512203349868.png\" alt=\"image-20220512203349868\"></p>\n<p>此语法解析 形成语法树</p>\n<p>优化器：Optimizer  优化性能更好一点  走哪一个索引优化 </p>\n<p>还有哪些优化 子查询 条件查询优化 连接查询 内连接外连接 语义优化</p>\n<p>基于成本（cost）默认是关闭的 set optimizer-_trace &#x3D; on 再查询数据然后系统表OPTIMIZER_TRACE 记录详细的过程和计划：1 join prepration 2 join optimizer （cost）3 join-execution</p>\n<p>Execute plan <img src=\"/post/SQL/image-20220512204712825.png\" alt=\"image-20220512204712825\"></p>\n<p>Executor: - 》Storage InnoDB –&gt;DBfile </p>\n<p><img src=\"/post/SQL/image-20220512205003310.png\" alt=\"image-20220512205003310\"></p>\n<p><img src=\"/post/SQL/image-20220512205104002.png\" alt=\"image-20220512205104002\"></p>\n<p>MySQL的架构核心模块</p>\n<p><img src=\"/post/SQL/image-20220512205301700.png\" alt=\"image-20220512205301700\"></p>\n<p>16k 的一个page  16384个字节</p>\n<p>InnoDB只有Redo log Undo log没有binlog 它在server层</p>\n<p>InnoDB三大特性：</p>\n<p>1.Adaptive hash index  自适应哈希索引（条件：等值查询）</p>\n<p>show engine innodb status 查看hashtable的命中情况</p>\n<p>发现频繁查询  1s3次等值查询 ，走的二级索引。认为是一个热点数据 创建自适应哈希索引。</p>\n<p>show variables like “%innodb_adaptive_hash%”</p>\n<p>2.Buffer Pool : 操作系统 块4 预读取3块 MySQL  pagesize 16K</p>\n<p>传统内存的分配设置是FIFO LRU淘汰机制</p>\n<p>不足：1.出现预读取失效  2.缓冲区污染  </p>\n<p>解决：JVM 新生代 旧生代 </p>\n<p>show variables like “%innodb_old%”</p>\n<p>MySQL的设计 分成New Old : innodb_old_blocks_pct:37% </p>\n<p>占比 37% 停留时间 1000ms</p>\n<p><img src=\"/post/SQL/image-20220512212140581.png\" alt=\"image-20220512212140581\"></p>\n<p>3.Double Write Buffer:  双写缓存</p>\n<p>存在的原因：Redo log重做可能会存在脏页 部分页失败的情况 无法重做</p>\n<p>一份在共享表空间2M  .  第一次是在redo prepare 第二次 事务提交更新db文件的时候。</p>\n<p><img src=\"/post/SQL/image-20220512212748024.png\" alt=\"image-20220512212748024\"></p>\n<p><img src=\"/post/SQL/image-20220512213642364.png\" alt=\"image-20220512213642364\"></p>\n<p>三大日志</p>\n<p>1：Redo log ：重做  二阶段提交 刷脏  然后记录</p>\n<p>二阶段提交：一开始是准备状态 prepare 另外一个状态commit</p>\n<p>binlog –&gt;标记Redo commit</p>\n<p>Prepare . Commit </p>\n<p>为什么要有：不在一层 binlog在server层 redo log在innodb层</p>\n<p>如果第一阶段redo 还没来得及写binlog 中断了 bin无法完成同步</p>\n<p>2：Undo log：回滚  优先记录</p>\n<p>3：Binary log:  二进制 不在innoDB 它在server层</p>\n<p>Update流程： update name &#x3D; ‘a’ where name &#x3D; ‘b’</p>\n<ol>\n<li><p>开启事务</p>\n</li>\n<li><p>查询流程一样，查询到数据之后更新BufferPool Change Buffer Logger Buffer </p>\n</li>\n<li><p>记录 Undo log  name&#x3D; ‘b’</p>\n</li>\n<li><p>修改 name &#x3D; ‘a’</p>\n</li>\n<li><p>记录Redo name&#x3D;’a’ prepare  Double Write 第一次</p>\n</li>\n<li><p>到server层记录binlog 发起线程 标记 redo log cmmit</p>\n</li>\n<li><p>事务提交 DB更新</p>\n</li>\n<li><p>Double Write 第二次</p>\n</li>\n</ol>\n","feature":true,"text":"MySQL架构流程 经历了四层 1 Connector JDBC odbc 2 Server (Query Cache &#x2F; Buffer, Parser, Optimizer…) 3 Storage (InnoDB MyISAM Memory) 4File (Row D...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":4,"path":"api/categories/JAVA.json"}],"tags":[{"name":"JAVA","slug":"JAVA","count":5,"path":"api/tags/JAVA.json"},{"name":"MYSQL","slug":"MYSQL","count":1,"path":"api/tags/MYSQL.json"}],"toc":"","author":{"name":"JIACHEN","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/AgentJIACHEN","twitter":"https://space.bilibili.com/59563009","stackoverflow":"https://stackoverflow.com/users/19074815/agentjiachen","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"面试Hot100","uid":"40b3365667227c08f3dff034fab7af35","slug":"top100","date":"2022-05-14T12:18:53.408Z","updated":"2022-05-14T12:27:30.792Z","comments":true,"path":"api/articles/top100.json","keywords":null,"cover":[],"text":" JDK JRE JVM的区别 2 java 异常类 Throwable &#x2F; \\ Execption Error runtime –&gt; try catch final 关键字 4 list set区别 5 HashMap的扩容机制原理 数组+链表1.7 数组+链表...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":4,"path":"api/categories/JAVA.json"}],"tags":[{"name":"JAVA","slug":"JAVA","count":5,"path":"api/tags/JAVA.json"},{"name":"面试","slug":"面试","count":1,"path":"api/tags/面试.json"}],"author":{"name":"JIACHEN","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/AgentJIACHEN","twitter":"https://space.bilibili.com/59563009","stackoverflow":"https://stackoverflow.com/users/19074815/agentjiachen","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Nginx 的学习手册","uid":"f72a446695f43ddb1d8bfbabff078e31","slug":"nginx","date":"2022-05-08T07:14:34.191Z","updated":"2022-05-14T12:01:27.146Z","comments":true,"path":"api/articles/nginx.json","keywords":null,"cover":[],"text":" Nginx 是一个高性能的 HTTP 和反向代理服务器，特点是占用内存少，并发能力强，事实上 Nginx 的并发能力确实在同类型的网页服务器中表现较好。 Nginx 专为性能优化而开发，性能是其最重要的要求，十分注重效率，有报告 Nginx 能支持高达 50000 个并发连接数...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":4,"path":"api/categories/JAVA.json"}],"tags":[{"name":"JAVA","slug":"JAVA","count":5,"path":"api/tags/JAVA.json"},{"name":"Nginx","slug":"Nginx","count":1,"path":"api/tags/Nginx.json"}],"author":{"name":"JIACHEN","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/AgentJIACHEN","twitter":"https://space.bilibili.com/59563009","stackoverflow":"https://stackoverflow.com/users/19074815/agentjiachen","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}