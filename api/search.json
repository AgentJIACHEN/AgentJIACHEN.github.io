[{"id":"1cac424653694fd0abd1397c14df4e06","title":"leetcode","content":"\n利用 x ^ 1s &#x3D; ~x 的特点，可以将位级表示翻转；利用 x ^ x &#x3D; 0 的特点，可以将三个数中重复的两个数去除，只留下另一个数。\n\n利用 x &amp; 0s &#x3D; 0 和 x &amp; 1s &#x3D; x 的特点，可以实现掩码操作。一个数 num 与 mask：00111100 进行位与操作，只保留 num 中与 mask 的 1 部分相对应的位。\n\n利用 x | 0s &#x3D; x 和 x | 1s &#x3D; 1s 的特点，可以实现设值操作。一个数 num 与 mask：00111100 进行位或操作，将 num 中与 mask 的 1 部分相对应的位都设置为 1。\n\n&gt;&gt; n 为算术右移，相当于除以 2n；\n\n&gt;&gt;&gt; n 为无符号右移，左边会补上 0。\n\n&lt;&lt; n 为算术左移，相当于乘以 2n\n\n\n位与运算技巧：\n\nn&amp;(n-1) 去除 n 的位级表示中最低的那一位1。例如对于二进制表示 10110100，减去 1 得到 10110011，这两个数相与得到 10110000。\nn&amp;(-n) 得到 n 的位级表示中最低的那一位。-n 得到 n 的反码加 1，对于二进制表示 10110100，-n 得到 01001100，相与得到 00000100。\nn-n&amp;(~n+1) 去除 n 的位级表示中最高的那一位。\n\nmask 计算要获取 111111111，将 0 取反即可，~0。\n要得到只有第 i 位为 1 的 mask，将 1 向左移动 i-1 位即可，1&lt;&lt;(i-1) 。例如 1&lt;&lt;4 得到只有第 5 位为 1 的 mask ：00010000。\n要得到 1 到 i 位为 1 的 mask，1&lt;&lt;(i+1)-1 即可，例如将 1&lt;&lt;(4+1)-1 &#x3D; 00010000-1 &#x3D; 00001111。\n要得到 1 到 i 位为 0 的 mask，只需将 1 到 i 位为 1 的 mask 取反，即 ~(1&lt;&lt;(i+1)-1)。\n\nn&amp;1：与操作，判断 n 二进制最右一位是否为 1 。\nn&gt;&gt;1：移位操作，删除n二进制的最右一位。\nn&amp;(1&lt;&lt;i)是将左移i位的1与n进行按位与，即为保留n的第i位，其余位置零\n常用if(n&amp;(1&lt;&lt;i)&#x3D;&#x3D;0)用于判断n的第i位是否为0\nlist.stream().mapToInt(Integer::intValue).toArray();list.stream().mapToInt(Integer::intValue).toArray();\n\n\n\n\n\n","slug":"leetcode","date":"2022-05-14T12:18:53.462Z","categories_index":"leetcode","tags_index":"JAVA,leetcode","author_index":"JIACHEN"},{"id":"40b3365667227c08f3dff034fab7af35","title":"面试Hot100","content":"\n\nJDK JRE JVM的区别\n\n2 java 异常类\n   Throwable\n  &#x2F;                     \\\nExecption      Error\n\nruntime –&gt; try catch\n\nfinal 关键字\n\n\n\n\n\n\n\n4 list set区别\n\n5 HashMap的扩容机制原理\n数组+链表1.7\n数组+链表+红黑树1.8\n\n6 HashMap 和 HashTable的区别以及底层实现 比较old了\n方法都差不多  线程安全&#x2F;不安全\nHashTable 都加上了 sychronized\n效率太低了 所以用了currentHashMap\n\n数组扩容\n​     长度超过了就new一个数组   老的放进新的里边来 \n7 String StringBuilder StringBuffer 的区别 以及使用场景\n\n8 JDK 1.7 1.8虚拟机的区别\n\n9 ArrayList和 LinkedList的区别  阿里一面\n\n10 CurrentHashMap怎么保证线程安全 阿里二面\n相当于是HashMap的多线程版本，它的功能本质上和HashMap没什么区别。因为HashMap在并发操作的时候会出现各种问题，比如死循环问题、数据覆盖等问题。而这些问题，只要使用ConcurrentHashMap就可以完美地解决。\n底层结构：JDK1.8以后采用了数组 加 链表 加 红黑树的方式优化了ConcurrentHashMap的实现，具体实现如图所示。\n\n当链表长度大于8，并且数组长度大于64时，链表就会升级为红黑树的结构。JDK 1.8中的ConcurrentHashMap虽然保留了Segment的定义，但这，仅仅是为了保证序列化时的兼容性，不再有任何结构上的用处了。\n\n\n\n\n\n\nJVM \n11 GC是如何判断对象可以被回收的\njava 可达性分析法\n \n\n12 java类加载器\n\n13 JVM那些可以作为gc root\n\n14 JVM中那些为线程共享区域\n方法区 和 堆区\n\n15 排查JVM问题 阿里一面\n如出现oom\n\n16 JAVA内存结构 队分为哪几部分  默认年龄多大进入老年代  蚂蚁二面\n\n17 什么是字节码 使用字节码的好处是什么\njavac   .class字节码文件  \n\n18类加载器 双亲委派模型\n\n19 JVM内存模型\n\n\n20 JVM调优\n\n主要是通过定制JVM运行参数 来提高JAVA的应用程度的运行数据\nJVM参数大致分为三类\n1 标注指令 -开头  所有的hotspot都支持的参数  java -help打印出来\n2 非标注指令 -x开头 通常根特定的hotspot版本对应的 可以用java -x打印出来\n3 不稳定参数 -XX开头 跟特定的hotspot版本对应的 变化非常大  JDK1.8版本下常用的 \n\njvm参数 阿里的ARTHAS  \t指令：dashboard\nGC\n\n\n21 Spring 单例池 作用\n底层是Map 《beanname bean对象》   这个map就叫单例池\n\n22Bean对象和普通对象的区别\n同一个 但出于不同时期\n23 PostConstract\n","slug":"top100","date":"2022-05-14T12:18:53.408Z","categories_index":"JAVA","tags_index":"JAVA,面试","author_index":"JIACHEN"},{"id":"8c8767142f7e95355e375b07bd636def","title":"MYSQL优化面试","content":"MySQL架构流程\n\n经历了四层\n1 Connector JDBC odbc\n2 Server (Query Cache &#x2F; Buffer, Parser, Optimizer…)\n3 Storage (InnoDB MyISAM Memory)\n4File (Row Data, Redo Undo Binlog …)放在.frm .ibd\nQueryCache 不好用 已弃用\n以字符串的形式匹配 命中率低 数据更新时会大量失效\n替代： Buffer Pool\n解析器： Parser\n\n此语法解析 形成语法树\n优化器：Optimizer  优化性能更好一点  走哪一个索引优化 \n还有哪些优化 子查询 条件查询优化 连接查询 内连接外连接 语义优化\n基于成本（cost）默认是关闭的 set optimizer-_trace &#x3D; on 再查询数据然后系统表OPTIMIZER_TRACE 记录详细的过程和计划：1 join prepration 2 join optimizer （cost）3 join-execution\nExecute plan \nExecutor: - 》Storage InnoDB –&gt;DBfile \n\n\nMySQL的架构核心模块\n\n16k 的一个page  16384个字节\nInnoDB只有Redo log Undo log没有binlog 它在server层\nInnoDB三大特性：\n1.Adaptive hash index  自适应哈希索引（条件：等值查询）\nshow engine innodb status 查看hashtable的命中情况\n发现频繁查询  1s3次等值查询 ，走的二级索引。认为是一个热点数据 创建自适应哈希索引。\nshow variables like “%innodb_adaptive_hash%”\n2.Buffer Pool : 操作系统 块4 预读取3块 MySQL  pagesize 16K\n传统内存的分配设置是FIFO LRU淘汰机制\n不足：1.出现预读取失效  2.缓冲区污染  \n解决：JVM 新生代 旧生代 \nshow variables like “%innodb_old%”\nMySQL的设计 分成New Old : innodb_old_blocks_pct:37% \n占比 37% 停留时间 1000ms\n\n3.Double Write Buffer:  双写缓存\n存在的原因：Redo log重做可能会存在脏页 部分页失败的情况 无法重做\n一份在共享表空间2M  .  第一次是在redo prepare 第二次 事务提交更新db文件的时候。\n\n\n三大日志\n1：Redo log ：重做  二阶段提交 刷脏  然后记录\n二阶段提交：一开始是准备状态 prepare 另外一个状态commit\nbinlog –&gt;标记Redo commit\nPrepare . Commit \n为什么要有：不在一层 binlog在server层 redo log在innodb层\n如果第一阶段redo 还没来得及写binlog 中断了 bin无法完成同步\n2：Undo log：回滚  优先记录\n3：Binary log:  二进制 不在innoDB 它在server层\nUpdate流程： update name &#x3D; ‘a’ where name &#x3D; ‘b’\n\n开启事务\n查询流程一样，查询到数据之后更新BufferPool Change Buffer Logger Buffer \n记录 Undo log  name&#x3D; ‘b’\n修改 name &#x3D; ‘a’\n记录Redo name&#x3D;’a’ prepare  Double Write 第一次\n到server层记录binlog 发起线程 标记 redo log cmmit\n事务提交 DB更新\nDouble Write 第二次\n\n\n\n\n数据量还是很大：\n                      分库分表: 垂直 按业务划分 \n\n​\t\t\t\t\t\t水平垂直分库 ：按量拆分\nMyCat Sharding-JDBC  雪花\n抗住各种压力SQL本身慢怎么办？优化SQL\n","slug":"SQL","date":"2022-05-14T12:18:53.378Z","categories_index":"JAVA","tags_index":"JAVA,MYSQL","author_index":"JIACHEN"},{"id":"f72a446695f43ddb1d8bfbabff078e31","title":"Nginx 的学习手册","content":"\nNginx 是一个高性能的 HTTP 和反向代理服务器，特点是占用内存少，并发能力强，事实上 Nginx 的并发能力确实在同类型的网页服务器中表现较好。\nNginx 专为性能优化而开发，性能是其最重要的要求，十分注重效率，有报告 Nginx 能支持高达 50000 个并发连接数。\n01\nNginx 知识网结构图\nNginx 的知识网结构图如下：\n\n02****反向代理\n正向代理：局域网中的电脑用户想要直接访问网络是不可行的，只能通过代理服务器来访问，这种代理服务就被称为正向代理。\n\n反向代理：客户端无法感知代理，因为客户端访问网络不需要配置，只要把请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据，然后再返回到客户端。\n此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器 IP 地址。\n\n03\n负载均衡\n客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服务器处理完毕之后，再将结果返回给客户端。\n普通请求和响应过程如下图：\n\n但是随着信息数量增长，访问量和数据量飞速增长，普通架构无法满足现在的需求。\n我们首先想到的是升级服务器配置，可以由于摩尔定律的日益失效，单纯从硬件提升性能已经逐渐不可取了，怎么解决这种需求呢？\n我们可以增加服务器的数量，构建集群，将请求分发到各个服务器上，将原来请求集中到单个服务器的情况改为请求分发到多个服务器，也就是我们说的负载均衡。\n图解负载均衡：\n\n假设有 15 个请求发送到代理服务器，那么由代理服务器根据服务器数量，平均分配，每个服务器处理 5 个请求，这个过程就叫做负载均衡。\n04****动静分离\n为了加快网站的解析速度，可以把动态页面和静态页面交给不同的服务器来解析，加快解析的速度，降低由单个服务器的压力。\n动静分离之前的状态：\n\n动静分离之后：\n\n05****Nginx安装\nNginx 如何在 Linux 安装\n参考链接：\nhttps:&#x2F;&#x2F;blog.csdn.net&#x2F;yujing1314&#x2F;article&#x2F;details&#x2F;97267369\n\nNginx 常用命令\n查看版本：\n.&#x2F;nginx -v\n\n\n\n启动：\n.&#x2F;nginx\n\n\n\n关闭（有两种方式，推荐使用 .&#x2F;nginx -s quit）：\n.&#x2F;nginx -s stop\n.&#x2F;nginx -s quit\n\n\n\n重新加载 Nginx 配置：\n.&#x2F;nginx -s reload\n\n\n\nNginx 的配置文件\n配置文件分三部分组成：\n①全局块从配置文件开始到 events 块之间，主要是设置一些影响 Nginx 服务器整体运行的配置指令。\n并发处理服务的配置，值越大，可以支持的并发处理量越多，但是会受到硬件、软件等设备的制约。\n\n②events 块影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 workprocess 下的网络连接进行序列化，是否允许同时接收多个网络连接等等。\n支持的最大连接数：\n\n③HTTP 块诸如反向代理和负载均衡都在此配置。\nlocation[ &#x3D; | ~ | ~* | ^~] url&#123;\n\n&#125;\n\n\n\nlocation 指令说明，该语法用来匹配 url，语法如上：\n\n&#x3D;：用于不含正则表达式的 url 前，要求字符串与 url 严格匹配，匹配成功就停止向下搜索并处理请求。\n~：用于表示 url 包含正则表达式，并且区分大小写。\n~*：用于表示 url 包含正则表达式，并且不区分大小写。\n^~：用于不含正则表达式的 url 前，要求 Nginx 服务器找到表示 url 和字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再匹配。\n如果有 url 包含正则表达式，不需要有 ~ 开头标识。\n\n06****反向代理实战\n①配置反向代理目的：在浏览器地址栏输入地址 www.123.com 跳转 Linux 系统 Tomcat 主页面。\n②具体实现\n先配置 Tomcat，因为比较简单，此处不再赘叙，并在 Windows 访问：\n\n具体流程如下图：\n\n修改之前：\n\n配置如下：\n\n再次访问：\n\n③反向代理 2\n目标：\n\n访问 http://192.168.25.132:9001/edu/ 直接跳转到 192.168.25.132:8080\n访问 http://192.168.25.132:9001/vod/ 直接跳转到 192.168.25.132:8081\n\n准备：配置两个 Tomcat，端口分别为 8080 和 8081，都可以访问，端口修改配置文件即可。\n\n\n新建文件内容分别添加 8080！！！和 8081！！！\n\n响应如下图：\n\n具体配置如下：\n\n重新加载 Nginx：\n.&#x2F;nginx -s reload\n\n\n\n\n\n访问：\n\n实现了同一个端口代理，通过 edu 和 vod 路径的切换显示不同的页面。\n反向代理小结\n第一个例子：浏览器访问 www.123.com，由 host 文件解析出服务器 ip 地址192.168.25.132 www.123.com。\n然后默认访问 80 端口，而通过 Nginx 监听 80 端口代理到本地的 8080 端口上，从而实现了访问 www.123.com，最终转发到 tomcat 8080 上去。\n第二个例子：\n\n访问 http://192.168.25.132:9001/edu/ 直接跳转到 192.168.25.132:8080\n访问 http://192.168.25.132:9001/vod/ 直接跳转到 192.168.25.132:8081\n\n实际上就是通过 Nginx 监听 9001 端口，然后通过正则表达式选择转发到 8080 还是 8081 的 Tomcat 上去。\n07\n负载均衡实战\n①修改 nginx.conf，如下图：\n\n②重启 Nginx：\n.&#x2F;nginx -s reload\n\n\n\n③在 8081 的 Tomcat 的 webapps 文件夹下新建 edu 文件夹和 a.html 文件，填写内容为 8081！！！！\n④在地址栏回车，就会分发到不同的 Tomcat 服务器上：\n\n负载均衡方式如下：\n\n轮询（默认）。\nweight，代表权，权越高优先级越高。\nfair，按后端服务器的响应时间来分配请求，相应时间短的优先分配。\nip_hash，每个请求按照访问 ip 的 hash 结果分配，这样每一个访客固定的访问一个后端服务器，可以解决 Session 的问题。\n\n\n08****动静分离实战什么是动静分离？把动态请求和静态请求分开，不是讲动态页面和静态页面物理分离，可以理解为 Nginx 处理静态页面，Tomcat 处理动态页面。动静分离大致分为两种：\n\n纯粹将静态文件独立成单独域名放在独立的服务器上，也是目前主流方案。\n将动态跟静态文件混合在一起发布，通过 Nginx 分开。\n\n动静分离图析：\n实战准备，准备静态文件：\n\n配置 Nginx，如下图：\n\nNginx 高可用\n如果 Nginx 出现问题：\n\n解决办法：\n\n前期准备：\n\n两台 Nginx 服务器\n安装 Keepalived\n虚拟 ip\n\n安装 Keepalived：[root@192 usr]# yum install keepalived -y\n[root@192 usr]# rpm -q -a keepalived\nkeepalived-1.3.5-16.el7.x86_64\n\n\n\n修改配置文件：\n[root@192 keepalived]# cd &#x2F;etc&#x2F;keepalived\n[root@192 keepalived]# vi keepalived.conf\n\n\n\n分别将如下配置文件复制粘贴，覆盖掉 keepalived.conf，虚拟 ip 为 192.168.25.50。\n对应主机 ip 需要修改的是：\n\nsmtp_server 192.168.25.147（主）smtp_server 192.168.25.147（备）\nstate MASTER（主） state BACKUP（备）\n\nglobal_defs &#123;\n   notification_email &#123;\n     acassen@firewall.loc\n     failover@firewall.loc\n     sysadmin@firewall.loc\n   &#125;\n   notification_email_from Alexandre.Cassen@firewall.loc\n   smtp_server 192.168.25.147\n   smtp_connect_timeout 30\n   router_id LVS_DEVEL # 访问的主机地址\n&#125;\n\nvrrp_script chk_nginx &#123;\n  script &quot;&#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx_check.sh&quot;  # 检测文件的地址\n  interval 2   # 检测脚本执行的间隔\n  weight 2   # 权重\n&#125;\n\nvrrp_instance VI_1 &#123;\n    state BACKUP    # 主机MASTER、备机BACKUP    \n    interface ens33   # 网卡\n    virtual_router_id 51 # 同一组需一致\n    priority 90  # 访问优先级，主机值较大，备机较小\n    advert_int 1\n    authentication &#123;\n        auth_type PASS\n        auth_pass 1111\n    &#125;\n    virtual_ipaddress &#123;\n        192.168.25.50  # 虚拟ip\n    &#125;\n&#125;\n\n\n\n启动代码如下：\n[root@192 sbin]# systemctl start keepalived.service\n\n\n\n\n\n访问虚拟 ip 成功：\n\n关闭主机 147 的 Nginx 和 Keepalived，发现仍然可以访问。\n原理解析\n\n如下图，就是启动了一个 master，一个 worker，master 是管理员，worker是具体工作的进程。\n\nworker 如何工作？如下图：\n\n小结\nworker 数应该和 CPU 数相等；一个 master 多个 worker 可以使用热部署，同时 worker 是独立的，一个挂了不会影响其他的。\n","slug":"nginx","date":"2022-05-08T07:14:34.191Z","categories_index":"JAVA","tags_index":"JAVA,Nginx","author_index":"JIACHEN"},{"id":"f10986d12ebf2b7b240f2a2d5f137570","title":"Spring Cloud 学习笔记（1 / 3）","content":"零基础微服务架构理论入门什么是微服务In short, the microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.——James Lewis and Martin Fowler (2014)\n微服务是一种架构风格一个应用拆分为一组小型服务每个服务运行在自己的进程内，也就是可独立部署和升级服务之间使用轻量级HTTP交互服务围绕业务功能拆分可以由全自动部署机制独立部署去中心化，服务自治。服务可以使用不同的语言、不同的存储技术主题词01：现代数字化生活-落地维度\n手机PC智能家居…主题词02：分布式微服务架构-落地维度\n满足哪些维度？支撑起这些维度的具体技术？\n服务调用服务降级服务注册与发先服务熔断负载均衡服务消息队列服务网关配置中心管理自动化构建部署服务监控全链路追踪服务定时任务调度操作\nSpring Cloud简介是什么？符合微服务技术维度\nSpringCloud&#x3D;分布式微服务架构的站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶\n猜猜SpringCloud这个大集合里有多少种技术?\nSpringCloud俨然已成为微服务开发的主流技术栈，在国内开发者社区非常火爆。\n“微”力十足，互联网大厂微服务架构案例\n京东的：\n阿里的：\n京东物流的：\nSpring Cloud技术栈\n总结\n03_第二季Boot和Cloud版本选型Spring Boot 2.X 版\n源码地址Spring Boot 2 的新特性通过上面官网发现，Boot官方强烈建议你升级到2.X以上版本Spring Cloud H版\n源码地址官网Spring Boot 与 Spring Cloud 兼容性查看\n文档JSON接口接下来开发用到的组件版本\nCloud - Hoxton.SR1Boot - 2.2.2.RELEASECloud Alibaba - 2.1.0.RELEASEJava - Java 8Maven - 3.5及以上MySQL - 5.7及以上04_Cloud组件停更说明停更引发的“升级惨案”\n停更不停用被动修复bugs不再接受合并请求不再发布新版本Cloud升级\n服务注册中心\n× Eureka√ Zookeeper√ Consul√ Nacos服务调用\n√ Ribbon√ LoadBalancer服务调用2\n× Feign√ OpenFeign服务降级\n× Hystrix√ resilience4j√ sentienl服务网关\n× Zuul! Zuul2√ gateway服务配置\n× Config√ Nacos服务总线\n× Bus√ NacosSpring Cloud官方文档\nSpring Cloud中文文档\nSpring Boot官方文档\n05_父工程Project空间新建约定 &gt; 配置 &gt; 编码\n创建微服务cloud整体聚合父工程Project，有8个关键步骤：\nNew Project - maven工程 - create from archetype: maven-archetype-site聚合总父工程名字Maven选版本工程名字字符编码 - Settings - File encoding注解生效激活 - Settings - Annotation ProcessorsJava编译版本选8File Type过滤 - Settings - File Typearchetype 英 [ˈɑːkitaɪp] 美 [ˈɑːrkitaɪp]n. 典型\nsite 英 [saɪt] 美 [saɪt]n. (建筑物、城镇等的)地点，位置，建筑工地;现场;发生地;场所;网站;站点v. 使坐落在;为…选址\n06_父工程pom文件&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  \n&lt;groupId&gt;com.lun&lt;/groupId&gt;\n&lt;artifactId&gt;LearnCloud&lt;/artifactId&gt;\n&lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;\n&lt;packaging&gt;pom&lt;/packaging&gt;&lt;!-- 这里添加，注意不是jar或war --&gt;\n\n&lt;!-- 统一管理jar包版本 --&gt;\n&lt;properties&gt;\n    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;\n    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;\n    &lt;junit.version&gt;4.12&lt;/junit.version&gt;\n    &lt;log4j.version&gt;1.2.17&lt;/log4j.version&gt;\n    &lt;lombok.version&gt;1.16.18&lt;/lombok.version&gt;\n    &lt;mysql.version&gt;5.1.47&lt;/mysql.version&gt;\n    &lt;druid.version&gt;1.1.16&lt;/druid.version&gt;\n    &lt;mybatis.spring.boot.version&gt;1.3.0&lt;/mybatis.spring.boot.version&gt;\n&lt;/properties&gt;\n\n&lt;!-- 子模块继承之后，提供作用：\n    锁定版本+子modlue不用写groupId和version --&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;!--spring boot 2.2.2--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!--spring cloud Hoxton.SR1--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;Hoxton.SR1&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;druid&lt;/artifactId&gt;\n            &lt;version&gt;$&#123;druid.version&#125;&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;$&#123;mybatis.spring.boot.version&#125;&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;/groupId&gt;\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\n            &lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;log4j&lt;/groupId&gt;\n            &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n            &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;$&#123;lombok.version&#125;&lt;/version&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n\n&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;configuration&gt;\n                &lt;fork&gt;true&lt;/fork&gt;\n                &lt;addResources&gt;true&lt;/addResources&gt;\n            &lt;/configuration&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n&lt;/project&gt;\n\n07_复习DependencyManagement和DependenciesMaven使用dependencyManagement元素来提供了一种管理依赖版本号的方式。\n通常会在一个组织或者项目的最顶层的父POM中看到dependencyManagement元素。\n使用pom.xml中的dependencyManagement元素能让所有在子项目中引用个依赖而不用显式的列出版本量。\nMaven会沿着父子层次向上走，直到找到一个拥有dependencyManagement元素的项目，然后它就会使用这个dependencyManagement元素中指定的版本号。\n&lt;dependencyManagement&gt;    &lt;dependencies&gt;        &lt;dependency&gt;        &lt;groupId&gt;mysq1&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;5.1.2&lt;/version&gt;        &lt;/dependency&gt;    &lt;dependencies&gt;&lt;/dependencyManagement&gt;\n然后在子项目里就可以添加mysql-connector时可以不指定版本号，例如：\n&lt;dependencies&gt;    &lt;dependency&gt;    &lt;groupId&gt;mysq1&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;\n这样做的好处就是：如果有多个子项目都引用同一样依赖，则可以避免在每个使用的子项目里都声明一个版本号，这样当想升级或切换到另一个版本时，只需要在顶层父容器里更新，而不需要一个一个子项目的修改；另外如果某个子项目需要另外的一个版本，只需要声明version就可。\ndependencyManagement里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖。如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项,并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom。如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。IDEA右侧旁的Maven插件有Toggle ‘ Skip Tests’ Mode按钮，这样maven可以跳过单元测试\n父工程创建完成执行mvn : install将父工程发布到仓库方便子工程继承。\n08_支付模块构建(上)创建微服务模块套路：\n建Module改POM写YML主启动业务类客户端消费者80order微服务提供者8001payment创建cloud-provider-payment8001微服务提供者支付Module模块：\n1.建名为cloud-provider-payment8001的Maven工程\n2.改POM\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;parent&gt;        &lt;artifactId&gt;LearnCloud&lt;/artifactId&gt;        &lt;groupId&gt;com.lun&lt;/groupId&gt;        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n&lt;artifactId>cloud-provider-payment8001&lt;/artifactId>\n\n&lt;dependencies>\n    &lt;!--包含了sleuth+zipkin-->\n    &lt;dependency>\n        &lt;groupId>org.springframework.cloud&lt;/groupId>\n        &lt;artifactId>spring-cloud-starter-zipkin&lt;/artifactId>\n    &lt;/dependency>\n    &lt;!--eureka-client-->\n    &lt;dependency>\n        &lt;groupId>org.springframework.cloud&lt;/groupId>\n        &lt;artifactId>spring-cloud-starter-netflix-eureka-client&lt;/artifactId>\n    &lt;/dependency>\n        &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity -->\n    &lt;!--\n    &lt;dependency>\n        &lt;groupId>com.atguigu.springcloud&lt;/groupId>\n        &lt;artifactId>cloud-api-commons&lt;/artifactId>\n        &lt;version>$&#123;project.version&#125;&lt;/version>\n    &lt;/dependency>\n    -->\n    &lt;dependency>\n        &lt;groupId>org.springframework.boot&lt;/groupId>\n        &lt;artifactId>spring-boot-starter-web&lt;/artifactId>\n    &lt;/dependency>\n    &lt;dependency>\n        &lt;groupId>org.springframework.boot&lt;/groupId>\n        &lt;artifactId>spring-boot-starter-actuator&lt;/artifactId>\n    &lt;/dependency>\n    &lt;dependency>\n        &lt;groupId>org.mybatis.spring.boot&lt;/groupId>\n        &lt;artifactId>mybatis-spring-boot-starter&lt;/artifactId>\n    &lt;/dependency>\n    &lt;dependency>\n        &lt;groupId>com.alibaba&lt;/groupId>\n        &lt;artifactId>druid-spring-boot-starter&lt;/artifactId>\n        &lt;version>1.1.10&lt;/version>\n    &lt;/dependency>\n    &lt;!--mysql-connector-java-->\n    &lt;dependency>\n        &lt;groupId>mysql&lt;/groupId>\n        &lt;artifactId>mysql-connector-java&lt;/artifactId>\n    &lt;/dependency>\n    &lt;!--jdbc-->\n    &lt;dependency>\n        &lt;groupId>org.springframework.boot&lt;/groupId>\n        &lt;artifactId>spring-boot-starter-jdbc&lt;/artifactId>\n    &lt;/dependency>\n    &lt;dependency>\n        &lt;groupId>org.springframework.boot&lt;/groupId>\n        &lt;artifactId>spring-boot-devtools&lt;/artifactId>\n        &lt;scope>runtime&lt;/scope>\n        &lt;optional>true&lt;/optional>\n    &lt;/dependency>\n    &lt;dependency>\n        &lt;groupId>org.projectlombok&lt;/groupId>\n        &lt;artifactId>lombok&lt;/artifactId>\n        &lt;optional>true&lt;/optional>\n    &lt;/dependency>\n    &lt;dependency>\n        &lt;groupId>org.springframework.boot&lt;/groupId>\n        &lt;artifactId>spring-boot-starter-test&lt;/artifactId>\n        &lt;scope>test&lt;/scope>\n    &lt;/dependency>\n&lt;/dependencies>\n\n&lt;/project&gt;\n3.写YML\nserver:\n  port: 8001\n\nspring:\n  application:\n    name: cloud-payment-service\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型\n    driver-class-name: org.gjt.mm.mysql.Driver              # mysql驱动包\n    url: jdbc:mysql://localhost:3306/my?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false\n    username: root\n    password: 1234\n\nmybatis:\n  mapperLocations: classpath:mapper/*.xml\n  type-aliases-package: com.lun.springcloud.entities    # 所有Entity别名类所在包\n\n\n09_支付模块构建(中)5.业务类\nSQL：`\n\n`CREATE TABLE payment(`\n\t`id bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'ID',`\n    `serial varchar(200) DEFAULT '',`\n\t`PRIMARY KEY (id)`\n`)ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4\n\nEntities：\n实体类Payment：\nimport lombok.AllArgsConstructor;`\n`import lombok.Data;`\n`import lombok.NoArgsConstructor;`\n\n`import java.io.Serializable;`\n\n`@Data`\n`@AllArgsConstructor`\n`@NoArgsConstructor`\n`public class Payment implements Serializable &#123;`\n    `private Long id;`\n    `private String serial;`\n`&#125;`\n\n`JSON封装体CommonResult：`\n\n`import lombok.AllArgsConstructor;`\n`import lombok.Data;`\n`import lombok.NoArgsConstructor;`\n\n`@Data`\n`@AllArgsConstructor`\n`@NoArgsConstructor`\n`public class CommonResult&lt;T>&#123;`\n    `private Integer code;`\n    `private String message;`\n    `private T data;`\n\n    public CommonResult(Integer code, String message)&#123;\n        this(code, message, null);\n    &#125;\n\n`&#125;\n\nDAO：\n接口PaymentDao：\nimport com.atguigu.springcloud.entities.Payment;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\n\n/**\n */\n@Mapper\n//@Repository不用Spring的\npublic interface PaymentDao\n&#123;\n    public int create(Payment payment);\n\n    public Payment getPaymentById(@Param(\"id\") Long id);\n\n&#125;\n\nMyBatis映射文件PaymentMapper.xml，路径：resources&#x2F;mapper&#x2F;PaymentMapper.xml\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\n&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n\n\n\n&lt;mapper namespace=\"com.lun.springcloud.dao.PaymentDao\">\n\n    &lt;insert id=\"create\" parameterType=\"Payment\" useGeneratedKeys=\"true\" keyProperty=\"id\">\n        insert into payment(serial)  values(#&#123;serial&#125;);\n    &lt;/insert>\n    \n    &lt;resultMap id=\"BaseResultMap\" type=\"com.lun.springcloud.entities.Payment\">\n        &lt;id column=\"id\" property=\"id\" jdbcType=\"BIGINT\"/>\n        &lt;id column=\"serial\" property=\"serial\" jdbcType=\"VARCHAR\"/>\n    &lt;/resultMap>\n    \n    &lt;select id=\"getPaymentById\" parameterType=\"Long\" resultMap=\"BaseResultMap\">\n        select * from payment where id=#&#123;id&#125;;\n    &lt;/select>\n\n&lt;/mapper>\n\nService：\n接口PaymentService\nimport com.lun.springcloud.entities.Payment;\nimport org.apache.ibatis.annotations.Param;\n\n/**\n */\npublic interface PaymentService\n&#123;\n    public int create(Payment payment);\n\n    public Payment getPaymentById(@Param(\"id\") Long id);\n\n&#125;\n\n\n实现类\n\nimport com.lun.springcloud.dao.PaymentDao;\nimport com.lun.springcloud.entities.Payment;\nimport com.lun.springcloud.service.PaymentService;\nimport org.apache.ibatis.annotations.Param;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\n\n/**\n */\n@Service\npublic class PaymentServiceImpl implements PaymentService\n&#123;\n    @Resource\n    private PaymentDao paymentDao;\n\n    public int create(Payment payment)\n    &#123;\n        return paymentDao.create(payment);\n    &#125;\n    \n    public Payment getPaymentById(Long id)\n    &#123;\n        return paymentDao.getPaymentById(id);\n    &#125;\n\n&#125;\n\nController：\nimport com.lun.springcloud.entities.CommonResult;\nimport com.lun.springcloud.entities.Payment;\nimport com.lun.springcloud.service.PaymentService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.cloud.client.ServiceInstance;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.cloud.client.discovery.DiscoveryClient;\n\nimport javax.annotation.Resource;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n/**\n */\n@RestController\n@Slf4j\npublic class PaymentController&#123;\n    @Resource\n    private PaymentService paymentService;\n\n    @PostMapping(value = \"/payment/create\")\n    public CommonResult create(Payment payment)\n    &#123;\n        int result = paymentService.create(payment);\n        log.info(\"*****插入结果：\"+result);\n    \n        if(result > 0)\n        &#123;\n            return new CommonResult(200,\"插入数据库成功,serverPort: \"+serverPort,result);\n        &#125;else&#123;\n            return new CommonResult(444,\"插入数据库失败\",null);\n        &#125;\n    &#125;\n    \n    @GetMapping(value = \"/payment/get/&#123;id&#125;\")\n    public CommonResult&lt;Payment> getPaymentById(@PathVariable(\"id\") Long id)\n    &#123;\n        Payment payment = paymentService.getPaymentById(id);\n    \n        if(payment != null)\n        &#123;\n            return new CommonResult(200,\"查询成功,serverPort:  \"+serverPort,payment);\n        &#125;else&#123;\n            return new CommonResult(444,\"没有对应记录,查询ID: \"+id,null);\n        &#125;\n    &#125;\n\n&#125;\n\n10_支付模块构建(下)6.测试\n浏览器 - http://localhost:8001/payment/get/1Postman - http://localhost:8001/payment/create?serial=lun27.小总结\n创建微服务模块套路：\n建Module改POM写YML主启动业务类11_热部署Devtools开发时使用，生产环境关闭\n1.Adding devtools to your project\n&lt;dependency>\n    &lt;groupId>org.springframework.boot&lt;/groupId>\n    &lt;artifactId>spring-boot-devtools&lt;/artifactId>\n    &lt;scope>runtime&lt;/scope>\n    &lt;optional>true&lt;/optional>\n&lt;/dependency>\n\n1234562.Adding plugin to your pom.xml\n下段配置复制到聚合父类总工程的pom.xml\n&lt;build>\n    &lt;!--\n\t&lt;finalName>你的工程名&lt;/finalName>（单一工程时添加）\n    -->\n    &lt;plugins>\n        &lt;plugin>\n            &lt;groupId>org.springframework.boot&lt;/groupId>\n            &lt;artifactId>spring-boot-maven-plugin&lt;/artifactId>\n            &lt;configuration>\n                &lt;fork>true&lt;/fork>\n                &lt;addResources>true&lt;/addResources>\n            &lt;/configuration>\n        &lt;/plugin>\n    &lt;/plugins>\n&lt;/build>\n\n3.Enabling automatic build\nFile -&gt; Settings(New Project Settings-&gt;Settings for New Projects) -&gt;Complier\n下面项勾选\nAutomatically show first error in editorDisplay notification on build completionBuild project automaticallyCompile independent modules in parallel4.Update the value of\n键入Ctrl + Shift + Alt + &#x2F; ，打开Registry，勾选：\ncompiler.automake.allow.when.app.running\nactionSystem.assertFocusAccessFromEdt\n5.重启IDEA\n12_消费者订单模块(上)1.建Module\n创建名为cloud-consumer-order80的maven工程。\n2.改POM\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  &lt;parent>\n    &lt;artifactId>LearnCloud&lt;/artifactId>\n    &lt;groupId>com.lun&lt;/groupId>\n    &lt;version>1.0.0-SNAPSHOT&lt;/version>\n  &lt;/parent>\n  &lt;modelVersion>4.0.0&lt;/modelVersion>\n\n  &lt;artifactId>cloud-consumer-order80&lt;/artifactId>\n\n  &lt;properties>\n    &lt;project.build.sourceEncoding>UTF-8&lt;/project.build.sourceEncoding>\n    &lt;maven.compiler.source>1.7&lt;/maven.compiler.source>\n    &lt;maven.compiler.target>1.7&lt;/maven.compiler.target>\n  &lt;/properties>\n\n  &lt;dependencies>\n    &lt;dependency>\n      &lt;groupId>org.springframework.boot&lt;/groupId>\n      &lt;artifactId>spring-boot-starter-web&lt;/artifactId>\n    &lt;/dependency>\n    &lt;dependency>\n      &lt;groupId>org.springframework.boot&lt;/groupId>\n      &lt;artifactId>spring-boot-starter-actuator&lt;/artifactId>\n    &lt;/dependency>\n\n    &lt;dependency>\n      &lt;groupId>org.springframework.boot&lt;/groupId>\n      &lt;artifactId>spring-boot-devtools&lt;/artifactId>\n      &lt;scope>runtime&lt;/scope>\n      &lt;optional>true&lt;/optional>\n    &lt;/dependency>\n    &lt;dependency>\n      &lt;groupId>org.projectlombok&lt;/groupId>\n      &lt;artifactId>lombok&lt;/artifactId>\n      &lt;optional>true&lt;/optional>\n    &lt;/dependency>\n    &lt;dependency>\n      &lt;groupId>org.springframework.boot&lt;/groupId>\n      &lt;artifactId>spring-boot-starter-test&lt;/artifactId>\n      &lt;scope>test&lt;/scope>\n    &lt;/dependency>\n\n  &lt;/dependencies>\n&lt;/project>\n\n\n3.写YML\nserver:  port: 80\n4.主启动\n\n&#96;&#96;&#96;javaimport org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;\n&#x2F;**\n\nHello world!\n *&#x2F;@SpringBootApplicationpublic class OrderMain80{public static void main( String[] args ){   SpringApplication.run(OrderMain80.class, args);}}   \n   \n\n 5.业务类\n\n实体类：\n\n&#96;&#96;&#96;java\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Payment implements Serializable &#123;\n    private Long id;\n    private String serial;\n&#125;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CommonResult&lt;T&gt;&#123;\n    private Integer code;\n    private String message;\n    private T data;\n\n    public CommonResult(Integer code, String message)&#123;\n        this(code, message, null);\n    &#125;\n\n&#125;\n\n\n\n\n\n控制层：\nimport com.lun.springcloud.entities.CommonResult;\nimport com.lun.springcloud.entities.Payment;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.client.RestTemplate;\n\nimport javax.annotation.Resource;\n\n@Slf4j\n@RestController\npublic class OrderController &#123;\n\n    public static final String PAYMENT_URL = \"http://localhost:8001\";\n    \n    @Resource\n    private RestTemplate restTemplate;\n    \n    @GetMapping(\"/consumer/payment/create\")\n    public CommonResult&lt;Payment> create(Payment payment)&#123;\n    \n        return restTemplate.postForObject(PAYMENT_URL+\"/payment/create\", payment, CommonResult.class);\n    &#125;\n    \n    @GetMapping(\"/consumer/payment/get/&#123;id&#125;\")\n    public CommonResult&lt;Payment> getPayment(@PathVariable(\"id\") Long id)&#123;\n        return restTemplate.getForObject(PAYMENT_URL+\"/payment/get/\"+id, CommonResult.class);\n    &#125;\n\n&#125;\n\n配置类：\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.client.RestTemplate;\n\n@Configuration\npublic class ApplicationContextConfig &#123;\n\n    @Bean\n    public RestTemplate getRestTemplate()&#123;\n        return new RestTemplate();\n    &#125;\n\n&#125;\n\n6.测试\n运行cloud-consumer-order80与cloud-provider-payment8001两工程\n浏览器 - http://localhost/consumer/payment/get/1RestTemplate\nRestTemplate提供了多种便捷访问远程Http服务的方法，是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具集\n官网地址\n使用：\n使用restTemplate访问restful接口非常的简单粗暴无脑。(url, requestMap, ResponseBean.class)这三个参数分别代表。REST请求地址、请求参数、HTTP响应转换被转换成的对象类型。13_消费者订单模块(下)浏览器 - http://localhost/consumer/payment/create?serial=lun3\n虽然，返回成功，但是观测数据库中，并没有创建serial为lun3的行。\n解决之道：在loud-provider-payment8001工程的PaymentController中添加@RequestBody注解。\npublic class PaymentController\n&#123;\n\n    @PostMapping(value = \"/payment/create\")\n    public CommonResult create(@RequestBody/*添加到这里*/ Payment payment)&#123;\n    \t...\n    &#125;\n\n&#125;\n\n通过修改idea的workspace.xml的方式来快速打开Run Dashboard窗口（这个用来显示哪些Spring Boot工程运行，停止等信息。我idea 2020.1版本在名为Services窗口就可以显示哪些Spring Boot工程运行，停止等信息出来，所以这仅作记录参考）。\n开启Run DashBoard\n打开工程路径下的.idea文件夹的workspace.xml\n在中修改或添加以下代码：\n&lt;option name=\"configurationTypes\">\n\t&lt;set>\n\t\t&lt;option value=\"SpringBootApplicationConfigurationType\"/>\n    &lt;/set>\n&lt;/option>\n\n由于idea版本差异，可能需要关闭重启。\n14_工程重构观察cloud-consumer-order80与cloud-provider-payment8001两工程有重复代码（entities包下的实体）（坏味道），重构。\n1.新建 - cloud-api-commons\n2.POM\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    &lt;parent>\n        &lt;artifactId>LearnCloud&lt;/artifactId>\n        &lt;groupId>com.lun.springcloud&lt;/groupId>\n        &lt;version>1.0.0-SNAPSHOT&lt;/version>\n    &lt;/parent>\n    &lt;modelVersion>4.0.0&lt;/modelVersion>\n\n    &lt;artifactId>cloud-api-commons&lt;/artifactId>\n    \n    &lt;dependencies>\n        &lt;dependency>\n            &lt;groupId>org.springframework.boot&lt;/groupId>\n            &lt;artifactId>spring-boot-devtools&lt;/artifactId>\n            &lt;scope>runtime&lt;/scope>\n            &lt;optional>true&lt;/optional>\n        &lt;/dependency>\n        &lt;dependency>\n            &lt;groupId>org.projectlombok&lt;/groupId>\n            &lt;artifactId>lombok&lt;/artifactId>\n            &lt;optional>true&lt;/optional>\n        &lt;/dependency>\n        &lt;dependency>\n            &lt;groupId>cn.hutool&lt;/groupId>\n            &lt;artifactId>hutool-all&lt;/artifactId>\n            &lt;version>5.1.0&lt;/version>\n        &lt;/dependency>\n    &lt;/dependencies>\n\n&lt;/project>\n\n3.entities\n将cloud-consumer-order80与cloud-provider-payment8001两工程的公有entities包移至cloud-api-commons工程下。\n4.maven clean、install cloud-api-commons工程，以供给cloud-consumer-order80与cloud-provider-payment8001两工程调用。\n5.订单80和支付8001分别改造\n将cloud-consumer-order80与cloud-provider-payment8001两工程的公有entities包移除引入cloud-api-commons依赖\n&lt;dependency>\n    &lt;groupId>com.lun.springcloud&lt;/groupId>\n    &lt;artifactId>cloud-api-commons&lt;/artifactId>\n    &lt;version>$&#123;project.version&#125;&lt;/version>\n&lt;/dependency>\n\n6.测试\n15_Eureka基础知识什么是服务治理\nSpring Cloud封装了Netflix 公司开发的Eureka模块来实现服务治理\n在传统的RPC远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。\n什么是服务注册与发现\nEureka采用了CS的设计架构，Eureka Sever作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用Eureka的客户端连接到 Eureka Server并维持心跳连接。这样系统的维护人员就可以通过Eureka Server来监控系统中各个微服务是否正常运行。\n在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息比如服务地址通讯地址等以别名方式注册到注册中心上。另一方(消费者服务提供者)，以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想:在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念)。在任何RPC远程框架中，都会有一个注册中心存放服务地址相关信息(接口地址)\nEureka包含两个组件:Eureka Server和Eureka Client\nEureka Server提供服务注册服务\n各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。\nEurekaClient通过注册中心进行访问\n它是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除（默认90秒)\n16_EurekaServer服务端安装IDEA生成eurekaServer端服务注册中心，类似物业公司\n1.创建名为cloud-eureka-server7001的Maven工程\n2.修改pom.xml\n&lt;!-- eureka新旧版本 -->\n&lt;!-- 以前的老版本（2018）-->\n&lt;dependency>\n    &lt;groupid>org.springframework.cloud&lt;/groupId>\n    &lt;artifactId>spring-cloud-starter-eureka&lt;/artifactId>\n&lt;/dependency>\n\n&lt;!-- 现在新版本（2020.2）-->&lt;!-- 我们使用最新的 -->\n&lt;dependency>\n    &lt;groupId>org.springframework.cloud&lt;/groupId>\n    &lt;artifactId>spring-cloud-starter-netflix-eureka-server&lt;/artifactId>\n&lt;/dependency>\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    &lt;parent>\n        &lt;artifactId>LearnCloud&lt;/artifactId>\n        &lt;groupId>com.lun.springcloud&lt;/groupId>\n        &lt;version>1.0.0-SNAPSHOT&lt;/version>\n    &lt;/parent>\n    &lt;modelVersion>4.0.0&lt;/modelVersion>\n\n    &lt;artifactId>cloud-eureka-server7001&lt;/artifactId>\n    \n    &lt;dependencies>\n        &lt;!--eureka-server-->\n        &lt;dependency>\n            &lt;groupId>org.springframework.cloud&lt;/groupId>\n            &lt;artifactId>spring-cloud-starter-netflix-eureka-server&lt;/artifactId>\n        &lt;/dependency>\n        &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity -->\n        &lt;dependency>\n            &lt;groupId>com.lun.springcloud&lt;/groupId>\n            &lt;artifactId>cloud-api-commons&lt;/artifactId>\n            &lt;version>$&#123;project.version&#125;&lt;/version>\n        &lt;/dependency>\n        &lt;!--boot web actuator-->\n        &lt;dependency>\n            &lt;groupId>org.springframework.boot&lt;/groupId>\n            &lt;artifactId>spring-boot-starter-web&lt;/artifactId>\n        &lt;/dependency>\n        &lt;dependency>\n            &lt;groupId>org.springframework.boot&lt;/groupId>\n            &lt;artifactId>spring-boot-starter-actuator&lt;/artifactId>\n        &lt;/dependency>\n        &lt;!--一般通用配置-->\n        &lt;dependency>\n            &lt;groupId>org.springframework.boot&lt;/groupId>\n            &lt;artifactId>spring-boot-devtools&lt;/artifactId>\n            &lt;scope>runtime&lt;/scope>\n            &lt;optional>true&lt;/optional>\n        &lt;/dependency>\n        &lt;dependency>\n            &lt;groupId>org.projectlombok&lt;/groupId>\n            &lt;artifactId>lombok&lt;/artifactId>\n        &lt;/dependency>\n        &lt;dependency>\n            &lt;groupId>org.springframework.boot&lt;/groupId>\n            &lt;artifactId>spring-boot-starter-test&lt;/artifactId>\n            &lt;scope>test&lt;/scope>\n        &lt;/dependency>\n        &lt;dependency>\n            &lt;groupId>junit&lt;/groupId>\n            &lt;artifactId>junit&lt;/artifactId>\n        &lt;/dependency>\n    &lt;/dependencies>\n\n&lt;/project>\n\n3.添加application.yml\nserver:\n  port: 7001\n\neureka:\n  instance:\n    hostname: locathost #eureka服务端的实例名称\n  client:\n    #false表示不向注册中心注册自己。\n    register-with-eureka: false\n    #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务\n    fetch-registry: false\n    service-url:\n      #设置与Eureka server交互的地址查询服务和注册服务都需要依赖这个地址。\n      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/\n\n4.主启动\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\n\n@SpringBootApplication\n@EnableEurekaServer\npublic class EurekaMain7001 &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(EurekaMain7001.class, args);\n    &#125;\n&#125;\n\n\n5.测试运行EurekaMain7001，浏览器输入http://localhost:7001/回车，会查看到Spring Eureka服务主页。\n17_支付微服务\n\n\n8001入驻进EurekaServerEurekaClient端cloud-provider-payment8001将注册进EurekaServer成为服务提供者provider，类似学校对外提供授课服务。\n1.修改cloud-provider-payment8001\n2.改POM\n添加spring-cloud-starter-netflix-eureka-client依赖\n&lt;dependency>\n    &lt;groupId>org.springframework.cloud&lt;/groupId>\n    &lt;artifactId>spring-cloud-starter-netflix-eureka-client&lt;/artifactId>\n&lt;/dependency>\n\n12343.写YML\neureka:  client:    #表示是否将自己注册进Eurekaserver默认为true。    register-with-eureka: true    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡    fetchRegistry: true    service-url:      defaultZone: http://localhost:7001/eureka123456784.主启动\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\n\n@SpringBootApplication\n@EnableEurekaClient//&lt;-----添加该注解\npublic class PaymentMain001 &#123;\n\n    public static void main(String[] args) &#123;\n        SpringApplication.run(PaymentMain001.class, args);\n    &#125;\n\n&#125;\n\n1234567891011125.测试\n启动cloud-provider-payment8001和cloud-eureka-server7001工程。\n浏览器输入 - http://localhost:7001/ 主页内的Instances currently registered with Eureka会显示cloud-provider-payment8001的配置文件application.yml设置的应用名cloud-payment-service\nspring:  application:    name: cloud-payment-service1236.自我保护机制\nEMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARELESSER THAN THRESHOLD AND HENCFT ARE NOT BEING EXPIRED JUST TO BE SAFE.\n紧急情况！EUREKA可能错误地声称实例在没有启动的情况下启动了。续订小于阈值，因此实例不会为了安全而过期。\n18_订单微服务80入驻进EurekaServerEurekaClient端cloud-consumer-order80将注册进EurekaServer成为服务消费者consumer，类似来上课消费的同学\n1.cloud-consumer-order80\n2.POM\n&lt;dependency>\n    &lt;groupId>org.springframework.cloud&lt;/groupId>\n    &lt;artifactId>spring-cloud-starter-netflix-eureka-client&lt;/artifactId>\n&lt;/dependency>\n\n12343.YML\nserver:  port: 80\nspring:  application:    name: cloud-order-service\neureka:  client:    #表示是否将自己注册进Eurekaserver默认为true。    register-with-eureka: true    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡    fetchRegistry: true    service-url:      defaultZone: http://localhost:7001/eureka1234567891011121314154.主启动\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\n\n@SpringBootApplication\n@EnableEurekaClient//&lt;--- 添加该标签\npublic class OrderMain80\n&#123;\n    public static void main( String[] args )&#123;\n        SpringApplication.run(OrderMain80.class, args);\n    &#125;\n&#125;\n\n1234567891011125.测试\n启动cloud-provider-payment8001、cloud-eureka-server7001和cloud-consumer-order80这三工程。浏览器输入 http://localhost:7001 , 在主页的Instances currently registered with Eureka将会看到cloud-provider-payment8001、cloud-consumer-order80两个工程名。注意，application.yml配置中层次缩进和空格，两者不能少，否则，会抛出异常Failed to bind properties under ‘eureka.client.service-url’ to java.util.Map &lt;java.lang.String, java.lang.String&gt;。\n19_Eureka集群原理说明1.Eureka集群原理说明\n服务注册：将服务信息注册进注册中心\n服务发现：从注册中心上获取服务信息\n实质：存key服务命取value闭用地址\n1先启动eureka注主册中心\n2启动服务提供者payment支付服务\n3支付服务启动后会把自身信息(比服务地址L以别名方式注朋进eureka\n4消费者order服务在需要调用接口时，使用服务别名去注册中心获取实际的RPC远程调用地址\n5消去者导调用地址后，底屋实际是利用HttpClient技术实现远程调用\n6消费者实癸导服务地址后会缓存在本地jvm内存中，默认每间隔30秒更新—次服务调用地址\n问题:微服务RPC远程服务调用最核心的是什么高可用，试想你的注册中心只有一个only one，万一它出故障了，会导致整个为服务环境不可用。\n解决办法：搭建Eureka注册中心集群，实现负载均衡+故障容错。\n互相注册，相互守望。\n20_Eureka集群环境构建创建cloud-eureka-server7002工程，过程参考16_EurekaServer服务端安装\nEureka7001Eureka7002找到C:\\Windows\\System32\\drivers\\etc路径下的hosts文件，修改映射配置添加进hosts文件127.0.0.1 eureka7001.com127.0.0.1 eureka7002.com12修改cloud-eureka-server7001配置文件server:  port: 7001\neureka:  instance:    hostname: eureka7001.com #eureka服务端的实例名称  client:    register-with-eureka: false     #false表示不向注册中心注册自己。    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务    service-url:    #集群指向其它eureka      defaultZone: http://eureka7002.com:7002/eureka/    #单机就是7001自己      #defaultZone: http://eureka7001.com:7001/eureka/1234567891011121314修改cloud-eureka-server7002配置文件server:  port: 7002\neureka:  instance:    hostname: eureka7002.com #eureka服务端的实例名称  client:    register-with-eureka: false     #false表示不向注册中心注册自己。    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务    service-url:    #集群指向其它eureka      defaultZone: http://eureka7001.com:7001/eureka/    #单机就是7002自己      #defaultZone: http://eureka7002.com:7002/eureka/1234567891011121314实践的时候，遇到异常情况\n在开启cloud-eureka-server7002时，开启失败，说7002端口被占用，然后在cmd中输入netstat -ano | find “7002”，查不到任何东西。\n纳闷一阵，重启电脑，问题解决。\n21_订单支付两微服务注册进Eureka集群将支付服务8001微服务，订单服务80微服务发布到上面2台Eureka集群配置中将它们的配置文件的eureka.client.service-url.defaultZone进行修改\neureka:  client:    #表示是否将自己注册进Eurekaserver默认为true。    register-with-eureka: true    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡    fetchRegistry: true    service-url:      defaultZone: http://eureka7001.com:7001/eureka, http://eureka7002.com:7002/eureka12345678测试01先要启动EurekaServer，7001&#x2F;7002服务再要启动服务提供者provider，8001再要启动消费者，80浏览器输入 - http://localhost/consumer/payment/get/122_支付微服务集群配置支付服务提供者8001集群环境构建\n参考cloud-provicer-payment8001\n1.新建cloud-provider-payment8002\n2.改POM\n3.写YML - 端口8002\n4.主启动\n5.业务类\n6.修改8001&#x2F;8002的Controller，添加serverPort\n@RestController@Slf4jpublic class PaymentController{\n@Value(&quot;$&#123;server.port&#125;&quot;)\nprivate String serverPort;//添加serverPort\n\n@PostMapping(value = &quot;/payment/create&quot;)\npublic CommonResult create(@RequestBody Payment payment)\n&#123;\n    int result = paymentService.create(payment);\n    log.info(&quot;*****插入结果：&quot; + result);\n\n    if(result &gt; 0) &#123;\n        return new CommonResult(200,&quot;插入数据库成功,serverPort: &quot;+serverPort/*添加到此处*/, result);\n    &#125;else&#123;\n        return new CommonResult(444,&quot;插入数据库失败&quot;,null);\n    &#125;\n&#125;\n\n}1234567891011121314151617181920负载均衡\ncloud-consumer-order80订单服务访问地址不能写死\n@Slf4j@RestControllerpublic class OrderController {\n//public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;\npublic static final String PAYMENT_URL = &quot;http://CLOUD-PAYMENT-SERVICE&quot;;\n\n...\n\n}123456789使用@LoadBalanced注解赋予RestTemplate负载均衡的能力\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.client.RestTemplate;\n@Configurationpublic class ApplicationContextConfig {\n@Bean\n@LoadBalanced//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力\npublic RestTemplate getRestTemplate()&#123;\n    return new RestTemplate();\n&#125;\n\n}123456789101112131415ApplicationContextBean - 提前说一下Ribbon的负载均衡功能\n测试\n先要启动EurekaServer，7001&#x2F;7002服务\n再要启动服务提供者provider，8001&#x2F;8002服务\n浏览器输入 - http://localhost/consumer/payment/get/31\n结果：负载均衡效果达到，8001&#x2F;8002端口交替出现\nRibbon和Eureka整合后Consumer可以直接调用服务而不用再关心地址和端口号，且该服务还有负载功能。\n相互注册，相互守望\n23_actuator微服务信息完善主机名称：服务名称修改（也就是将IP地址，换成可读性高的名字）\n修改cloud-provider-payment8001，cloud-provider-payment8002\n修改部分 - YML - eureka.instance.instance-id\neureka:  …  instance:    instance-id: payment8001 #添加此处1234eureka:  …  instance:    instance-id: payment8002 #添加此处1234修改之后\neureka主页将显示payment8001，payment8002代替原来显示的IP地址。\n访问信息有IP信息提示，（就是将鼠标指针移至payment8001，payment8002名下，会有IP地址提示）\n修改部分 - YML - eureka.instance.prefer-ip-address\neureka:  …  instance:    instance-id: payment8001    prefer-ip-address: true #添加此处12345eureka:  …  instance:    instance-id: payment8002    prefer-ip-address: true #添加此处1234524_服务发现Discovery对于注册进eureka里面的微服务，可以通过服务发现来获得该服务的信息\n修改cloud-provider-payment8001的Controller@RestController@Slf4jpublic class PaymentController{    …\n@Resource\nprivate DiscoveryClient discoveryClient;\n\n...\n\n@GetMapping(value = &quot;/payment/discovery&quot;)\npublic Object discovery()\n&#123;\n    List&lt;String&gt; services = discoveryClient.getServices();\n    for (String element : services) &#123;\n        log.info(&quot;*****element: &quot;+element);\n    &#125;\n\n    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(&quot;CLOUD-PAYMENT-SERVICE&quot;);\n    for (ServiceInstance instance : instances) &#123;\n        log.info(instance.getServiceId()+&quot;\\t&quot;+instance.getHost()+&quot;\\t&quot;+instance.getPort()+&quot;\\t&quot;+instance.getUri());\n    &#125;\n\n    return this.discoveryClient;\n&#125;\n\n}12345678910111213141516171819202122232425268001主启动类@SpringBootApplication@EnableEurekaClient@EnableDiscoveryClient&#x2F;&#x2F;添加该注解public class PaymentMain001 {\npublic static void main(String[] args) &#123;\n    SpringApplication.run(PaymentMain001.class, args);\n&#125;\n\n}\n12345678910自测先要启动EurekaSeryer\n再启动8001主启动类，需要稍等一会儿\n浏览器输入http://localhost:8001/payment/discovery\n浏览器输出：\n{“services”:[“cloud-payment-service”],”order”:0}1后台输出：\n*****element: cloud-payment-serviceCLOUD-PAYMENT-SERVICE\t192.168.199.218\t8001\thttp://192.168.199.218:80011225_Eureka自我保护理论知识概述\n保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护。一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务。\n如果在Eureka Server的首页看到以下这段提示，则说明Eureka进入了保护模式:\nEMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THANTHRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUSTTO BE SAFE\n导致原因\n一句话：某时刻某一个微服务不可用了，Eureka不会立刻清理，依旧会对该微服务的信息进行保存。\n属于CAP里面的AP分支。\n为什么会产生Eureka自我保护机制?\n为了EurekaClient可以正常运行，防止与EurekaServer网络不通情况下，EurekaServer不会立刻将EurekaClient服务剔除\n什么是自我保护模式?\n默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例(默认90秒)。但是当网络分区故障发生(延时、卡顿、拥挤)时，微服务与EurekaServer之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，此时本不应该注销这个微服务。Eureka通过“自我保护模式”来解决这个问题——当EurekaServer节点在短时间内丢失过多客户端时(可能发生了网络分区故障)，那么这个节点就会进入自我保护模式。\n自我保护机制∶默认情况下EurekaClient定时向EurekaServer端发送心跳包\n如果Eureka在server端在一定时间内(默认90秒)没有收到EurekaClient发送心跳包，便会直接从服务注册列表中剔除该服务，但是在短时间( 90秒中)内丢失了大量的服务实例心跳，这时候Eurekaserver会开启自我保护机制，不会剔除该服务（该现象可能出现在如果网络不通但是EurekaClient为出现宕机，此时如果换做别的注册中心如果一定时间内没有收到心跳会将剔除该服务，这样就出现了严重失误，因为客户端还能正常发送心跳，只是网络延迟问题，而保护机制是为了解决此问题而产生的)。\n在自我保护模式中，Eureka Server会保护服务注册表中的信息，不再注销任何服务实例。\n它的设计哲学就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例。一句话讲解：好死不如赖活着。\n综上，自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留）也不盲目注销任何健康的微服务。使用自我保护模式，可以让Eureka集群更加的健壮、稳定。\n26_怎么禁止自我保护在eurekaServer端7001处设置关闭自我保护机制出厂默认，自我保护机制是开启的\n使用eureka.server.enable-self-preservation &#x3D; false可以禁用自我保护模式\neureka:  …  server:    #关闭自我保护机制，保证不可用服务被及时踢除    enable-self-preservation: false    eviction-interval-timer-in-ms: 2000123456关闭效果：\nspring-eureka主页会显示出一句：\nTHE SELF PRESERVATION MODE IS TURNED OFF. THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK&#x2F;OTHER PROBLEMS.\n生产者客户端eureakeClient端8001默认：\neureka.instance.lease-renewal-interval-in-seconds&#x3D;30\neureka.instance.lease-expiration-duration-in-seconds&#x3D;90\neureka:  …  instance:    instance-id: payment8001    prefer-ip-address: true    #心跳检测与续约时间    #开发时没置小些，保证服务关闭后注册中心能即使剔除服务    #Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒)    lease-renewal-interval-in-seconds: 1    #Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务    lease-expiration-duration-in-seconds: 21234567891011测试7001和8001都配置完成先启动7001再启动8001结果：先关闭8001，马上被删除了\n27_Eureka停更说明https://github.com/Netflix/eureka/wiki\nEureka 2.0 (Discontinued)\nThe existing open source work on eureka 2.0 is discontinued. The code base and artifacts that were released as part of the existing repository of work on the 2.x branch is considered use at your own risk.\nEureka 1.x is a core part of Netflix’s service discovery system and is still an active project.\n我们用ZooKeeper代替Eureka功能。\n28_支付服务注册进zookeeper注册中心Zookeeperzookeeper是一个分布式协调工具，可以实现注册中心功能\n关闭Linux服务器防火墙后，启动zookeeper服务器\n用到的Linux命令行：\nsystemctl stop firewalld关闭防火墙systemctl status firewalld查看防火墙状态ipconfig查看IP地址ping查验结果zookeeper服务器取代Eureka服务器，zk作为服务注册中心\n视频里是用虚拟机CentOS开启ZooKeeper，我打算在本机启动ZooKeeper，具体操作参考ZooKeeper学习笔记。\n服务提供者1.新建名为cloud-provider-payment8004的Maven工程。\n2.POM\n\n            LearnCloud        com.lun.springcloud        1.0.0-SNAPSHOT        4.0.0\n&lt;artifactId&gt;cloud-provider-payment8004&lt;/artifactId&gt;\n&lt;dependencies&gt;\n    &lt;!-- SpringBoot整合Web组件 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;\n        &lt;groupId&gt;com.lun.springcloud&lt;/groupId&gt;\n        &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt;\n        &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!-- SpringBoot整合zookeeper客户端 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;/artifactId&gt;\n        &lt;!--先排除自带的zookeeper3.5.3 防止与3.4.9起冲突--&gt;\n        &lt;exclusions&gt;\n            &lt;exclusion&gt;\n                &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;\n                &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;\n            &lt;/exclusion&gt;\n        &lt;/exclusions&gt;\n    &lt;/dependency&gt;\n    &lt;!--添加zookeeper3.4.9版本--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;\n        &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;\n        &lt;version&gt;3.4.9&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;\n        &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;optional&gt;true&lt;/optional&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n        &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n        &lt;optional&gt;true&lt;/optional&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n3.YML\n\n#8004表示注册到zookeeper服务器的支付服务提供者端口号server:  port: 8004\n#服务别名—-注册zookeeper到注册中心名称spring:  application:    name: cloud-provider-payment  cloud:    zookeeper:      connect-string: 127.0.0.1:2181 # 192.168.111.144:2181 #12345678910114.主启动类\nimport org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n@SpringBootApplication@EnableDiscoveryClient&#x2F;&#x2F;该注解用于向使用consul或者zookeeper作为注册中心时注册服务public class PaymentMain8004 {    public static void main(String[] args) {        SpringApplication.run(PaymentMain8004.class, args);    }}12345678910115.Controller\nimport lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Value;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;\nimport java.util.UUID;\n@RestController@Slf4jpublic class PaymentController{    @Value(“${server.port}”)    private String serverPort;\n@RequestMapping(value = &quot;/payment/zk&quot;)\npublic String paymentzk()\n&#123;\n    return &quot;springcloud with zookeeper: &quot;+serverPort+&quot;\\t&quot;+ UUID.randomUUID().toString();\n&#125;\n\n}\n1234567891011121314151617181920216.启动8004注册进zookeeper（要先启动zookeeper的server）\n验证测试：浏览器 - http://localhost:8004/payment/zk\n验证测试2 ：接着用zookeeper客户端操作\n[zk: localhost:2181(CONNECTED) 0] ls &#x2F;[services, zookeeper][zk: localhost:2181(CONNECTED) 1] ls &#x2F;services&#x2F;cloud-provider-payment[a4567f50-6ad9-47a3-9fbb-7391f41a9f3d][zk: localhost:2181(CONNECTED) 2] get &#x2F;services&#x2F;cloud-provider-payment&#x2F;a4567f50-6ad9-47a3-9fbb-7391f41a9f3d{“name”:”cloud-provider-payment”,”id”:”a4567f50-6ad9-47a3-9fbb-7391f41a9f3d”,”address”:”192.168.199.218”,”port”:8004,”sslPort”:null,”payload”:{“@class”:”org.springframework.cloud.zookeeper.discovery.ZookeeperInstance”,”id”:”application-1”,”name”:”cloud-provider-payment”,”metadata”:{}},”registrationTimeUTC”:1612811116918,”serviceType”:”DYNAMIC”,”uriSpec”:{“parts”:[{“value”:”scheme”,”variable”:true},{“value”:”:&#x2F;&#x2F;“,”variable”:false},{“value”:”address”,”variable”:true},{“value”:”:”,”variable”:false},{“value”:”port”,”variable”:true}]}}[zk: localhost:2181(CONNECTED) 3]1234567891011json格式化get &#x2F;services&#x2F;cloud-provider-payment&#x2F;a4567f50-6ad9-47a3-9fbb-7391f41a9f3d的结果：\n{    “name”: “cloud-provider-payment”,    “id”: “a4567f50-6ad9-47a3-9fbb-7391f41a9f3d”,    “address”: “192.168.199.218”,    “port”: 8004,    “sslPort”: null,    “payload”: {        “@class”: “org.springframework.cloud.zookeeper.discovery.ZookeeperInstance”,        “id”: “application-1”,        “name”: “cloud-provider-payment”,        “metadata”: { }    },    “registrationTimeUTC”: 1612811116918,    “serviceType”: “DYNAMIC”,    “uriSpec”: {        “parts”: [            {                “value”: “scheme”,                “variable”: true            },            {                “value”: “:&#x2F;&#x2F;“,                “variable”: false            },            {                “value”: “address”,                “variable”: true            },            {                “value”: “:”,                “variable”: false            },            {                “value”: “port”,                “variable”: true            }        ]    }}12345678910111213141516171819202122232425262728293031323334353637383929_临时还是持久节点ZooKeeper的服务节点是临时节点，没有Eureka那含情脉脉。\n30_订单服务注册进zookeeper1.新建cloud-consumerzk-order80\n2.POM\n\n            LearnCloud        com.lun.springcloud        1.0.0-SNAPSHOT        4.0.0\n&lt;artifactId&gt;cloud-consumerzk-order80&lt;/artifactId&gt;\n\n&lt;dependencies&gt;\n    &lt;!-- SpringBoot整合Web组件 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- SpringBoot整合zookeeper客户端 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;/artifactId&gt;\n        &lt;!--先排除自带的zookeeper--&gt;\n        &lt;exclusions&gt;\n            &lt;exclusion&gt;\n                &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;\n                &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;\n            &lt;/exclusion&gt;\n        &lt;/exclusions&gt;\n    &lt;/dependency&gt;\n    &lt;!--添加zookeeper3.4.9版本--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;\n        &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;\n        &lt;version&gt;3.4.9&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;\n        &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;optional&gt;true&lt;/optional&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n        &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n        &lt;optional&gt;true&lt;/optional&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n3.YML\n\nserver:  port: 80\n#服务别名—-注册zookeeper到注册中心名称spring:  application:    name: cloud-consumer-order  cloud:    zookeeper:      connect-string: 127.0.0.1:2181 # 192.168.111.144:2181 #123456789104.主启动\nimport org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n@SpringBootApplication@EnableDiscoveryClientpublic class OrderZKMain80 {    public static void main(String[] args) {        SpringApplication.run(OrderZKMain80.class, args);    }}12345678910115.业务类\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.client.RestTemplate;\n@Configurationpublic class ApplicationContextConfig{    @Bean    @LoadBalanced    public RestTemplate getRestTemplate()    {        return new RestTemplate();    }}123456789101112131415import javax.annotation.Resource;\n@RestController@Slf4jpublic class OrderZKController{    public static final String INVOKE_URL &#x3D; “http://cloud-provider-payment&quot;;\n@Resource\nprivate RestTemplate restTemplate;\n\n@GetMapping(value = &quot;/consumer/payment/zk&quot;)\npublic String paymentInfo()\n&#123;\n    String result = restTemplate.getForObject(INVOKE_URL+&quot;/payment/zk&quot;,String.class);\n    return result;\n&#125;\n\n}1234567891011121314151617186.验证测试\n运行ZooKeeper服务端，cloud-consumerzk-order80，cloud-provider-payment8004。\n打开ZooKeeper客户端：\n[zk: localhost:2181(CONNECTED) 0] ls &#x2F;[services, zookeeper][zk: localhost:2181(CONNECTED) 1] ls &#x2F;services[cloud-consumer-order, cloud-provider-payment][zk: localhost:2181(CONNECTED) 2]123457.访问测试地址 - http://localhost/consumer/payment/zk\n31_Consul简介Consul官网\nConsul下载地址\nWhat is Consul?\nConsul is a service mesh solution providing a full featured control plane with service discovery, configuration, and segmentation functionality. Each of these features can be used individually as needed, or they can be used together to build a full service mesh. Consul requires a data plane and supports both a proxy and native integration model. Consul ships with a simple built-in proxy so that everything works out of the box, but also supports 3rd party proxy integrations such as Envoy. link\nConsul是一个服务网格解决方案，它提供了一个功能齐全的控制平面，具有服务发现、配置和分段功能。这些特性中的每一个都可以根据需要单独使用，也可以一起用于构建全服务网格。Consul需要一个数据平面，并支持代理和本机集成模型。Consul船与一个简单的内置代理，使一切工作的开箱即用，但也支持第三方代理集成，如Envoy。\nconsul英 [ˈkɒnsl] 美 [ˈkɑːnsl]n. 领事\nConsul是一套开源的分布式服务发现和配置管理系统，由HashiCorp 公司用Go语言开发。\n提供了微服务系统中的服务治理、配置中心、控制总线等功能。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建全方位的服务网格，总之Consul提供了一种完整的服务网格解决方案。\n它具有很多优点。包括：基于raft协议，比较简洁；支持健康检查，同时支持HTTP和DNS协议支持跨数据中心的WAN集群提供图形界面跨平台，支持Linux、Mac、Windows。\nThe key features of Consul are:\nService Discovery: Clients of Consul can register a service, such as api or mysql, and other clients can use Consul to discover providers of a given service. Using either DNS or HTTP, applications can easily find the services they depend upon.Health Checking: Consul clients can provide any number of health checks, either associated with a given service (“is the webserver returning 200 OK”), or with the local node (“is memory utilization below 90%”). This information can be used by an operator to monitor cluster health, and it is used by the service discovery components to route traffic away from unhealthy hosts.KV Store: Applications can make use of Consul’s hierarchical key&#x2F;value store for any number of purposes, including dynamic configuration, feature flagging, coordination, leader election, and more. The simple HTTP API makes it easy to use.Secure Service Communication: Consul can generate and distribute TLS certificates for services to establish mutual TLS connections. Intentions can be used to define which services are allowed to communicate. Service segmentation can be easily managed with intentions that can be changed in real time instead of using complex network topologies and static firewall rules.Multi Datacenter: Consul supports multiple datacenters out of the box. This means users of Consul do not have to worry about building additional layers of abstraction to grow to multiple regions.link\n能干嘛？\n服务发现 - 提供HTTP和DNS两种发现方式。健康监测 - 支持多种方式，HTTP、TCP、Docker、Shell脚本定制化KV存储 - Key、Value的存储方式多数据中心 - Consul支持多数据中心可视化Web界面怎么玩\n32_安装并运行Consul官网安装说明\nwindows版解压缩后，得consul.exe，打开cmd\n查看版本consul -v：D:\\Consul&gt;consul -vConsul v1.9.3Revision f55da9306Protocol 2 spoken by default, understands 2 to 3 (agent will automatically use protocol &gt;2 when speaking to compatible agents)1234开发模式启动consul agent -dev：浏览器输入 - http://localhost:8500/ - 打开Consul控制页。\n33_服务提供者注册进Consul1.新建Module支付服务provider8006\n2.POM\n\n            LearnCloud        com.lun.springcloud        1.0.0-SNAPSHOT        4.0.0\n&lt;artifactId&gt;cloud-providerconsul-payment8006&lt;/artifactId&gt;\n&lt;dependencies&gt;\n    &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lun.springcloud&lt;/groupId&gt;\n        &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt;\n        &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!--SpringCloud consul-server --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- SpringBoot整合Web组件 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!--日常通用jar包配置--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;\n        &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;optional&gt;true&lt;/optional&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n        &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n        &lt;optional&gt;true&lt;/optional&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;cn.hutool&lt;/groupId&gt;\n        &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;\n        &lt;version&gt;RELEASE&lt;/version&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;cn.hutool&lt;/groupId&gt;\n        &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;\n        &lt;version&gt;RELEASE&lt;/version&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n3.YML\n\n###consul服务端口号server:  port: 8006\nspring:  application:    name: consul-provider-payment####consul注册中心地址  cloud:    consul:      host: localhost      port: 8500      discovery:        #hostname: 127.0.0.1        service-name: ${spring.application.name}1234567891011121314154.主启动类\nimport org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n@SpringBootApplication@EnableDiscoveryClientpublic class PaymentMain8006{    public static void main(String[] args) {            SpringApplication.run(PaymentMain8006.class, args);    }}1234567891011125.业务类Controller\nimport lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Value;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;\nimport java.util.UUID;\n@RestController@Slf4jpublic class PaymentController{    @Value(“${server.port}”)    private String serverPort;\n@RequestMapping(value = &quot;/payment/consul&quot;)\npublic String paymentConsul()\n&#123;\n    return &quot;springcloud with consul: &quot;+serverPort+&quot;\\t   &quot;+ UUID.randomUUID().toString();\n&#125;\n\n}\n1234567891011121314151617181920216.验证测试\nhttp://localhost:8006/payment/consulhttp://localhost:8500 - 会显示provider800634_服务消费者注册进Consul1.新建Module消费服务order80 - cloud-consumerconsul-order80\n2.POM\n\n            LearnCloud        com.lun.springcloud        1.0.0-SNAPSHOT        4.0.0\n&lt;artifactId&gt;cloud-consumerconsul-order80&lt;/artifactId&gt;\n&lt;dependencies&gt;\n    &lt;!--SpringCloud consul-server --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- SpringBoot整合Web组件 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!--日常通用jar包配置--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;\n        &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;optional&gt;true&lt;/optional&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n        &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n        &lt;optional&gt;true&lt;/optional&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n3.YML\n\n###consul服务端口号server:  port: 80\nspring:  application:    name: cloud-consumer-order####consul注册中心地址  cloud:    consul:      host: localhost      port: 8500      discovery:        #hostname: 127.0.0.1        service-name: ${spring.application.name}1234567891011121314154.主启动类\nimport org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n@SpringBootApplication@EnableDiscoveryClient &#x2F;&#x2F;该注解用于向使用consul或者zookeeper作为注册中心时注册服务public class OrderConsulMain80{    public static void main(String[] args) {            SpringApplication.run(OrderConsulMain80.class, args);    }}\n123456789101112135.配置Bean\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.client.RestTemplate;\n&#x2F;** *&#x2F;@Configurationpublic class ApplicationContextConfig{    @Bean    @LoadBalanced    public RestTemplate getRestTemplate()    {        return new RestTemplate();    }}12345678910111213141516176.Controller\nimport lombok.extern.slf4j.Slf4j;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.client.RestTemplate;\nimport javax.annotation.Resource;\n@RestController@Slf4jpublic class OrderConsulController{    public static final String INVOKE_URL &#x3D; “http://consul-provider-payment&quot;;\n@Resource\nprivate RestTemplate restTemplate;\n\n@GetMapping(value = &quot;/consumer/payment/consul&quot;)\npublic String paymentInfo()\n&#123;\n    String result = restTemplate.getForObject(INVOKE_URL+&quot;/payment/consul&quot;,String.class);\n    return result;\n&#125;\n\n}12345678910111213141516171819202122237.验证测试\n运行consul，cloud-providerconsul-payment8006，cloud-consumerconsul-order80\nhttp://localhost:8500/ 主页会显示出consul，cloud-providerconsul-payment8006，cloud-consumerconsul-order80三服务。\n8.访问测试地址 - http://localhost/consumer/payment/consul\n35_三个注册中心异同点组件名\t语言CAP\t服务健康检查\t对外暴露接口\tSpring Cloud集成Eureka\tJava\tAP\t可配支持\tHTTPConsul\tGo\tCP\t支持\tHTTP&#x2F;DNSZookeeper\tJava\tCP\t支持客户端\t已集成CAP：\nC：Consistency (强一致性)\nA：Availability (可用性)\nP：Partition tolerance （分区容错性)\n最多只能同时较好的满足两个。\nCAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求。\n因此，根据CAP原理将NoSQL数据库分成了满足CA原则、满足CP原则和满足AP原则三大类:\nCA - 单点集群，满足—致性，可用性的系统，通常在可扩展性上不太强大。CP - 满足一致性，分区容忍必的系统，通常性能不是特别高。AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。AP架构（Eureka）\n当网络分区出现后，为了保证可用性，系统B可以返回旧值，保证系统的可用性。\n结论：违背了一致性C的要求，只满足可用性和分区容错，即AP\nCP架构（ZooKeeper&#x2F;Consul）\n当网络分区出现后，为了保证一致性，就必须拒接请求，否则无法保证一致性。\n结论：违背了可用性A的要求，只满足一致性和分区容错，即CP。\nCP 与 AP 对立同一的矛盾关系。\n36_Ribbon入门介绍Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端负载均衡的工具。\n简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法和服务调用。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。\n简单的说，就是在配置文件中列出Load Balancer(简称LB)后面所有的机器，Ribbon会自动的帮助你基于某种规则(如简单轮询，随机连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。\nribbon\n英 [ˈrɪbən] 美 [ˈrɪbən]\nn. (用于捆绑或装饰的)带子;丝带;带状物;狭长的东西;绶带;勋带\nGithub - Ribbon\nRibbon目前也进入维护模式。\nRibbon未来可能被Spring Cloud LoadBalacer替代。\nLB负载均衡(Load Balance)是什么\n简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA (高可用)。\n常见的负载均衡有软件Nginx，LVS，硬件F5等。\nRibbon本地负载均衡客户端VS Nginx服务端负载均衡区别\nNginx是服务器负载均衡，客户端所有请求都会交给nginx，然后由nginx实现转发请求。即负载均衡是由服务端实现的。Ribbon本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。\n集中式LB\n即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5, 也可以是软件，如nginx)，由该设施负责把访问请求通过某种策略转发至服务的提供方;\n进程内LB\n将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。\nRibbon就属于进程内LB，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。\n一句话\n负载均衡 + RestTemplate调用\n37_Ribbon的负载均衡和Rest调用架构说明\n总结：Ribbon其实就是一个软负载均衡的客户端组件，它可以和其他所需请求的客户端结合使用，和Eureka结合只是其中的一个实例。\nRibbon在工作时分成两步：\n第一步先选择EurekaServer ,它优先选择在同一个区域内负载较少的server。\n第二步再根据用户指定的策略，在从server取到的服务注册列表中选择一个地址。\n其中Ribbon提供了多种策略：比如轮询、随机和根据响应时间加权。\nPOM\n先前工程项目没有引入spring-cloud-starter-ribbon也可以使用ribbon。\n\n    org.springframework.cloud\n    spring-cloud-starter-netflix-ribbon\n\n1\n2\n3\n4\n这是因为spring-cloud-starter-netflix-eureka-client自带了spring-cloud-starter-ribbon引用。\n\n二说RestTemplate的使用\nRestTemplate Java Doc\ngetForObject() &#x2F; getForEntity() - GET请求方法\ngetForObject()：返回对象为响应体中数据转化成的对象，基本上可以理解为Json。\ngetForEntity()：返回对象为ResponseEntity对象，包含了响应中的一些重要信息，比如响应头、响应状态码、响应体等。\n@GetMapping(“&#x2F;consumer&#x2F;payment&#x2F;getForEntity&#x2F;{id}”)public CommonResult getPayment2(@PathVariable(“id”) Long id){    ResponseEntity entity &#x3D; restTemplate.getForEntity(PAYMENT_URL+”&#x2F;payment&#x2F;get&#x2F;“+id,CommonResult.class);\nif(entity.getStatusCode().is2xxSuccessful())&#123;\n    return entity.getBody();//getForObject()\n&#125;else&#123;\n    return new CommonResult&lt;&gt;(444,&quot;操作失败&quot;);\n&#125;\n\n}1234567891011postForObject() &#x2F; postForEntity() - POST请求方法\n38_Ribbon默认自带的负载规则lRule：根据特定算法中从服务列表中选取一个要访问的服务\nRoundRobinRule 轮询RandomRule 随机RetryRule 先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重WeightedResponseTimeRule 对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择BestAvailableRule 会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务AvailabilityFilteringRule 先过滤掉故障实例，再选择并发较小的实例ZoneAvoidanceRule 默认规则,复合判断server所在区域的性能和server的可用性选择服务器39_Ribbon负载规则替换1.修改cloud-consumer-order80\n2.注意配置细节\n官方文档明确给出了警告:\n这个自定义配置类不能放在@ComponentScan所扫描的当前包下以及子包下，\n否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，达不到特殊化定制的目的了。\n（也就是说不要将Ribbon配置类与主启动类同包）\n3.新建package - com.lun.myrule\n4.在com.lun.myrule下新建MySelfRule规则类\nimport com.netflix.loadbalancer.IRule;import com.netflix.loadbalancer.RandomRule;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;\n@Configurationpublic class MySelfRule {\n@Bean\npublic IRule myRule()&#123;\n    return new RandomRule();\n&#125;\n\n}123456789101112135.主启动类添加@RibbonClient\nimport com.lun.myrule.MySelfRule;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;import org.springframework.cloud.netflix.ribbon.RibbonClient;\n@SpringBootApplication@EnableEurekaClient&#x2F;&#x2F;添加到此处@RibbonClient(name &#x3D; “CLOUD-PAYMENT-SERVICE”, configuration &#x3D; MySelfRule.class)public class OrderMain80{    public static void main( String[] args ){        SpringApplication.run(OrderMain80.class, args);    }}123456789101112131415166.测试\n开启cloud-eureka-server7001，cloud-consumer-order80，cloud-provider-payment8001，cloud-provider-payment8002\n浏览器-输入http://localhost/consumer/payment/get/1\n返回结果中的serverPort在8001与8002两种间反复横跳。\n40_Ribbon默认负载轮询算法原理默认负载轮训算法: rest接口第几次请求数 % 服务器集群总数量 &#x3D; 实际调用服务器位置下标，每次服务重启动后rest接口计数从1开始。\nList instances &#x3D; discoveryClient.getInstances(“CLOUD-PAYMENT-SERVICE”);\n如:\nList [0] instances &#x3D; 127.0.0.1:8002List [1] instances &#x3D; 127.0.0.1:80018001+ 8002组合成为集群，它们共计2台机器，集群总数为2，按照轮询算法原理：\n当总请求数为1时:1%2&#x3D;1对应下标位置为1，则获得服务地址为127.0.0.1:8001当总请求数位2时:2%2&#x3D;О对应下标位置为0，则获得服务地址为127.0.0.1:8002当总请求数位3时:3%2&#x3D;1对应下标位置为1，则获得服务地址为127.0.0.1:8001当总请求数位4时:4%2&#x3D;О对应下标位置为0，则获得服务地址为127.0.0.1:8002如此类推…41_RoundRobinRule源码分析public interface IRule{    &#x2F;*     * choose one alive server from lb.allServers or     * lb.upServers according to key     *     * @return choosen Server object. NULL is returned if none     *  server is available     *&#x2F;\n//重点关注这方法\npublic Server choose(Object key);\n\npublic void setLoadBalancer(ILoadBalancer lb);\n\npublic ILoadBalancer getLoadBalancer();    \n\n}12345678910111213141516package com.netflix.loadbalancer;\nimport com.netflix.client.config.IClientConfig;import org.slf4j.Logger;import org.slf4j.LoggerFactory;\nimport java.util.List;import java.util.concurrent.atomic.AtomicInteger;\n&#x2F;**\n\nThe most well known and basic load balancing strategy, i.e. Round Robin Rule.\n\n\n\n\n@author stonse\n\n@author Nikos Michalakis &#x6e;&#x69;&#x6b;&#111;&#115;&#64;&#x6e;&#x65;&#x74;&#102;&#x6c;&#105;&#x78;&#46;&#99;&#x6f;&#109;\n\n *&#x2F;public class RoundRobinRule extends AbstractLoadBalancerRule {\n\nprivate AtomicInteger nextServerCyclicCounter;private static final boolean AVAILABLE_ONLY_SERVERS &#x3D; true;private static final boolean ALL_SERVERS &#x3D; false;\nprivate static Logger log &#x3D; LoggerFactory.getLogger(RoundRobinRule.class);\npublic RoundRobinRule() {    nextServerCyclicCounter &#x3D; new AtomicInteger(0);}\npublic RoundRobinRule(ILoadBalancer lb) {    this();    setLoadBalancer(lb);}\n&#x2F;&#x2F;重点关注这方法。public Server choose(ILoadBalancer lb, Object key) {    if (lb &#x3D;&#x3D; null) {        log.warn(“no load balancer”);        return null;    }\nServer server = null;\nint count = 0;\nwhile (server == null &amp;&amp; count++ &lt; 10) &#123;\n    List&lt;Server&gt; reachableServers = lb.getReachableServers();\n    List&lt;Server&gt; allServers = lb.getAllServers();\n    int upCount = reachableServers.size();\n    int serverCount = allServers.size();\n \n    if ((upCount == 0) || (serverCount == 0)) &#123;\n        log.warn(&quot;No up servers available from load balancer: &quot; + lb);\n        return null;\n    &#125;\n \n    int nextServerIndex = incrementAndGetModulo(serverCount);\n    server = allServers.get(nextServerIndex);\n \n    if (server == null) &#123;\n        /* Transient. */\n        Thread.yield();\n        continue;\n    &#125;\n \n    if (server.isAlive() &amp;&amp; (server.isReadyToServe())) &#123;\n        return (server);\n    &#125;\n \n    // Next.\n    server = null;\n&#125;\n \nif (count &gt;= 10) &#123;\n    log.warn(&quot;No available alive servers after 10 tries from load balancer: &quot;\n            + lb);\n&#125;\nreturn server;\n\n}\n&#x2F;**\n\nInspired by the implementation of {@link AtomicInteger#incrementAndGet()}.\n\n\n\n@param modulo The modulo to bound the value of the counter.\n@return The next value.*&#x2F; private int incrementAndGetModulo(int modulo) {for (;;) {int current &#x3D; nextServerCyclicCounter.get();int next &#x3D; (current + 1) % modulo;&#x2F;&#x2F;求余法if (nextServerCyclicCounter.compareAndSet(current, next))    return next;} }\n\n@Overridepublic Server choose(Object key) {    return choose(getLoadBalancer(), key);}\n@Overridepublic void initWithNiwsConfig(IClientConfig clientConfig) {} } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 42_Ribbon之手写轮询算法 自己试着写一个类似RoundRobinRule的本地负载均衡器。\n\n\n7001&#x2F;7002集群启动\n8001&#x2F;8002微服务改造- controller\n@RestController@Slf4jpublic class PaymentController{\n...\n\n@GetMapping(value = &quot;/payment/lb&quot;)\npublic String getPaymentLB() &#123;\n    return serverPort;//返回服务接口\n&#125;\n\n...\n\n}1234567891011121380订单微服务改造1.ApplicationContextConfig去掉注解@LoadBalanced，OrderMain80去掉注解@RibbonClient\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.client.RestTemplate;\n@Configurationpublic class ApplicationContextConfig {\n@Bean\n//@LoadBalanced\npublic RestTemplate getRestTemplate()&#123;\n    return new RestTemplate();\n&#125;\n\n}1234567891011121314152.创建LoadBalancer接口\nimport org.springframework.cloud.client.ServiceInstance;\nimport java.util.List;\n&#x2F;** *&#x2F;public interface LoadBalancer{    ServiceInstance instances(List serviceInstances);}123456789103.MyLB\n实现LoadBalancer接口\nimport org.springframework.cloud.client.ServiceInstance;import org.springframework.stereotype.Component;\nimport java.util.List;import java.util.concurrent.atomic.AtomicInteger;\n&#x2F;** *&#x2F;@Component&#x2F;&#x2F;需要跟主启动类同包，或者在其子孙包下。public class MyLB implements LoadBalancer{\nprivate AtomicInteger atomicInteger = new AtomicInteger(0);\n\npublic final int getAndIncrement()\n&#123;\n    int current;\n    int next;\n\n    do &#123;\n        current = this.atomicInteger.get();\n        next = current &gt;= 2147483647 ? 0 : current + 1;\n    &#125;while(!this.atomicInteger.compareAndSet(current,next));\n    System.out.println(&quot;*****第几次访问，次数next: &quot;+next);\n    return next;\n&#125;\n\n//负载均衡算法：rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标  ，每次服务重启动后rest接口计数从1开始。\n@Override\npublic ServiceInstance instances(List&lt;ServiceInstance&gt; serviceInstances)\n&#123;\n    int index = getAndIncrement() % serviceInstances.size();\n\n    return serviceInstances.get(index);\n&#125;\n\n}\n123456789101112131415161718192021222324252627282930313233343536374.OrderController\nimport org.springframework.cloud.client.ServiceInstance;import org.springframework.cloud.client.discovery.DiscoveryClient;import com.lun.springcloud.lb.LoadBalancer;\n@Slf4j@RestControllerpublic class OrderController {\n//public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;\npublic static final String PAYMENT_URL = &quot;http://CLOUD-PAYMENT-SERVICE&quot;;\n\n...\n\n@Resource\nprivate LoadBalancer loadBalancer;\n\n@Resource\nprivate DiscoveryClient discoveryClient;\n\n...\n\n@GetMapping(value = &quot;/consumer/payment/lb&quot;)\npublic String getPaymentLB()\n&#123;\n    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(&quot;CLOUD-PAYMENT-SERVICE&quot;);\n\n    if(instances == null || instances.size() &lt;= 0)&#123;\n        return null;\n    &#125;\n\n    ServiceInstance serviceInstance = loadBalancer.instances(instances);\n    URI uri = serviceInstance.getUri();\n\n    return restTemplate.getForObject(uri+&quot;/payment/lb&quot;,String.class);\n\n&#125;\n\n}123456789101112131415161718192021222324252627282930313233343536375.测试 不停地刷新http://localhost/consumer/payment/lb，可以看到8001/8002交替出现。\n43_OpenFeign是什么官方文档\nGithub地址\nFeign is a declarative web service client. It makes writing web service clients easier. To use Feign create an interface and annotate it. It has pluggable annotation support including Feign annotations and JAX-RS annotations. Feign also supports pluggable encoders and decoders. Spring Cloud adds support for Spring MVC annotations and for using the same HttpMessageConverters used by default in Spring Web. Spring Cloud integrates Ribbon and Eureka, as well as Spring Cloud LoadBalancer to provide a load-balanced http client when using Feign. link\nFeign是一个声明式WebService客户端。使用Feign能让编写Web Service客户端更加简单。它的使用方法是定义一个服务接口然后在上面添加注解。Feign也支持可拔插式的编码器和解码器。Spring Cloud对Feign进行了封装，使其支持了Spring MVC标准注解和HttpMessageConverters。Feign可以与Eureka和Ribbon组合使用以支持负载均衡。\nFeign能干什么\nFeign旨在使编写Java Http客户端变得更容易。\n前面在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了一套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，我们只需创建一个接口并使用注解的方式来配置它(以前是Dao接口上面标注Mapper注解,现在是一个微服务接口上面标注一个Feign注解即可)，即可完成对服务提供方的接口绑定，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。\nFeign集成了Ribbon\n利用Ribbon维护了Payment的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，通过feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。\nFeign和OpenFeign两者区别\nFeign是Spring Cloud组件中的一个轻量级RESTful的HTTP服务客户端Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign的使用方式是:使用Feign的注解定义接口，调用这个接口，就可以调用服务注册中心的服务。\n\n    org.springframework.cloud\n    spring-cloud-starter-feign\n\n1\n2\n3\n4\nOpenFeign是Spring Cloud在Feign的基础上支持了SpringMVC的注解，如@RequesMapping等等。OpenFeign的@Feignclient可以解析SpringMVc的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。\n\n\n    org.springframework.cloud\n    spring-cloud-starter-openfeign\n\n1\n2\n3\n4\nfeign\n英 [feɪn] 美 [feɪn]\nv. 假装，装作，佯装(有某种感觉或生病、疲倦等)\n\n44_OpenFeign服务调用接口+注解：微服务调用接口 + @FeignClient\n1.新建cloud-consumer-feign-order80\n2.POM\n\n            LearnCloud        com.lun.springcloud        1.0.0-SNAPSHOT        4.0.0\n&lt;artifactId&gt;cloud-consumer-feign-order80&lt;/artifactId&gt;\n\n&lt;dependencies&gt;\n    &lt;!--openfeign--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!--eureka client--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lun.springcloud&lt;/groupId&gt;\n        &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt;\n        &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!--web--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!--一般基础通用配置--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;\n        &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;optional&gt;true&lt;/optional&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n        &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n        &lt;optional&gt;true&lt;/optional&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n3.YML\n\nserver:  port: 80\neureka:  client:    register-with-eureka: false    service-url:      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/123456784.主启动\nimport org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.openfeign.EnableFeignClients;\n@SpringBootApplication@EnableFeignClientspublic class OrderFeignMain80 {    public static void main(String[] args) {        SpringApplication.run(OrderFeignMain80.class, args);    }}\n1234567891011125.业务类\n业务逻辑接口+@FeignClient配置调用provider服务\n新建PaymentFeignService接口并新增注解@FeignClient\nimport com.lun.springcloud.entities.CommonResult;import com.lun.springcloud.entities.Payment;import org.springframework.cloud.openfeign.FeignClient;import org.springframework.stereotype.Component;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;\n@Component@FeignClient(value &#x3D; “CLOUD-PAYMENT-SERVICE”)public interface PaymentFeignService{    @GetMapping(value &#x3D; “&#x2F;payment&#x2F;get&#x2F;{id}”)    public CommonResult getPaymentById(@PathVariable(“id”) Long id);\n}12345678910111213141516控制层Controller\nimport com.lun.springcloud.entities.CommonResult;import com.lun.springcloud.entities.Payment;import com.lun.springcloud.service.PaymentFeignService;import lombok.extern.slf4j.Slf4j;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RestController;import javax.annotation.Resource;\n@RestController@Slf4jpublic class OrderFeignController{    @Resource    private PaymentFeignService paymentFeignService;\n@GetMapping(value = &quot;/consumer/payment/get/&#123;id&#125;&quot;)\npublic CommonResult&lt;Payment&gt; getPaymentById(@PathVariable(&quot;id&quot;) Long id)\n&#123;\n    return paymentFeignService.getPaymentById(id);\n&#125;\n\n}\n1234567891011121314151617181920212223246.测试\n先启动2个eureka集群7001&#x2F;7002\n再启动2个微服务8001&#x2F;8002\n启动OpenFeign启动\nhttp://localhost/consumer/payment/get/1\nFeign自带负载均衡配置项\n45_OpenFeign超时控制超时设置，故意设置超时演示出错情况\n1.服务提供方8001&#x2F;8002故意写暂停程序\n@RestController@Slf4jpublic class PaymentController {\n...\n\n@Value(&quot;$&#123;server.port&#125;&quot;)\nprivate String serverPort;\n\n...\n\n@GetMapping(value = &quot;/payment/feign/timeout&quot;)\npublic String paymentFeignTimeout()\n&#123;\n    // 业务逻辑处理正确，但是需要耗费3秒钟\n    try &#123;\n        TimeUnit.SECONDS.sleep(3);\n    &#125; catch (InterruptedException e) &#123;\n        e.printStackTrace();\n    &#125;\n    return serverPort;\n&#125;\n\n...\n\n}123456789101112131415161718192021222324252.服务消费方80添加超时方法PaymentFeignService\n@Component@FeignClient(value &#x3D; “CLOUD-PAYMENT-SERVICE”)public interface PaymentFeignService{\n...\n\n@GetMapping(value = &quot;/payment/feign/timeout&quot;)\npublic String paymentFeignTimeout();\n\n}\n123456789103.服务消费方80添加超时方法OrderFeignController\n@RestController@Slf4jpublic class OrderFeignController{    @Resource    private PaymentFeignService paymentFeignService;\n...\n\n@GetMapping(value = &quot;/consumer/payment/feign/timeout&quot;)\npublic String paymentFeignTimeout()\n&#123;\n    // OpenFeign客户端一般默认等待1秒钟\n    return paymentFeignService.paymentFeignTimeout();\n&#125;\n\n}123456789101112131415164.测试：\n多次刷新http://localhost/consumer/payment/feign/timeout\n将会跳出错误Spring Boot默认错误页面，主要异常：feign.RetryableException:Read timed out executing GET http://CLOUD-PAYMENT-SERVCE/payment/feign/timeout。\nOpenFeign默认等待1秒钟，超过后报错\nYML文件里需要开启OpenFeign客户端超时控制\n#设置feign客户端超时时间(OpenFeign默认支持ribbon)(单位：毫秒)ribbon:  #指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间  ReadTimeout: 5000  #指的是建立连接后从服务器读取到可用资源所用的时间  ConnectTimeout: 500012345646_OpenFeign日志增强日志打印功能\nFeign提供了日志打印功能，我们可以通过配置来调整日恙级别，从而了解Feign 中 Http请求的细节。\n说白了就是对Feign接口的调用情况进行监控和输出\n日志级别\nNONE：默认的，不显示任何日志;BASIC：仅记录请求方法、URL、响应状态码及执行时间;HEADERS：除了BASIC中定义的信息之外，还有请求和响应的头信息;FULL：除了HEADERS中定义的信息之外，还有请求和响应的正文及元数据。配置日志bean\nimport feign.Logger;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;\n@Configurationpublic class FeignConfig{    @Bean    Logger.Level feignLoggerLevel()    {        return Logger.Level.FULL;    }}\n1234567891011121314YML文件里需要开启日志的Feign客户端\nlogging:  level:    # feign日志以什么级别监控哪个接口    com.lun.springcloud.service.PaymentFeignService: debug1234后台日志查看\n得到更多日志信息。\n47_Hystrix是什么概述\n分布式系统面临的问题\n复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免地失败。\n服务雪崩\n多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”.对于高流量的应用来说，单一的后避依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。\n所以，通常当你发现一个模块下的某个实例失败后，这时候这个模块依然还会接收流量，然后这个有问题的模块还调用了其他的模块，这样就会发生级联故障，或者叫雪崩。\nHystrix是什么\nHystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。\n“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝)，向调用方返回一个符合预期的、可处理的备选响应（FallBack)，而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。\nhystrixn. 豪猪属;猬草属;豪猪;豪猪亚属\n48_Hystrix停更进维能干嘛\n服务降级服务熔断接近实对的监控…官网资料\nlink\nHystrix官宣，停更进维\nlink\n被动修bugs不再接受合并请求不再发布新版本49_Hystrix的服务降级熔断限流概念初讲服务降级\n服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，fallback\n哪些情况会出发降级\n程序运行导常超时服务熔断触发服务降级线程池&#x2F;信号量打满也会导致服务降级服务熔断\n类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示。\n服务的降级 -&gt; 进而熔断 -&gt; 恢复调用链路\n服务限流\n秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行。\n50_Hystrix支付微服务构建将cloud-eureka-server7001改配置成单机版\n1.新建cloud-provider-hygtrix-payment8001\n2.POM\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    &lt;parent>\n        &lt;artifactId>cloud2020&lt;/artifactId>\n        &lt;groupId>com.atguigu.springcloud&lt;/groupId>\n        &lt;version>1.0-SNAPSHOT&lt;/version>\n    &lt;/parent>\n    &lt;modelVersion>4.0.0&lt;/modelVersion>\n\n    &lt;artifactId>cloud-provider-hystrix-payment8001&lt;/artifactId>\n    \n    &lt;dependencies>\n        &lt;!--hystrix-->\n        &lt;dependency>\n            &lt;groupId>org.springframework.cloud&lt;/groupId>\n            &lt;artifactId>spring-cloud-starter-netflix-hystrix&lt;/artifactId>\n        &lt;/dependency>\n        &lt;!--eureka client-->\n        &lt;dependency>\n            &lt;groupId>org.springframework.cloud&lt;/groupId>\n            &lt;artifactId>spring-cloud-starter-netflix-eureka-client&lt;/artifactId>\n        &lt;/dependency>\n        &lt;!--web-->\n        &lt;dependency>\n            &lt;groupId>org.springframework.boot&lt;/groupId>\n            &lt;artifactId>spring-boot-starter-web&lt;/artifactId>\n        &lt;/dependency>\n        &lt;dependency>\n            &lt;groupId>org.springframework.boot&lt;/groupId>\n            &lt;artifactId>spring-boot-starter-actuator&lt;/artifactId>\n        &lt;/dependency>\n        &lt;dependency>&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity -->\n            &lt;groupId>com.atguigu.springcloud&lt;/groupId>\n            &lt;artifactId>cloud-api-commons&lt;/artifactId>\n            &lt;version>$&#123;project.version&#125;&lt;/version>\n        &lt;/dependency>\n        &lt;dependency>\n            &lt;groupId>org.springframework.boot&lt;/groupId>\n            &lt;artifactId>spring-boot-devtools&lt;/artifactId>\n            &lt;scope>runtime&lt;/scope>\n            &lt;optional>true&lt;/optional>\n        &lt;/dependency>\n        &lt;dependency>\n            &lt;groupId>org.projectlombok&lt;/groupId>\n            &lt;artifactId>lombok&lt;/artifactId>\n            &lt;optional>true&lt;/optional>\n        &lt;/dependency>\n        &lt;dependency>\n            &lt;groupId>org.springframework.boot&lt;/groupId>\n            &lt;artifactId>spring-boot-starter-test&lt;/artifactId>\n            &lt;scope>test&lt;/scope>\n        &lt;/dependency>\n    &lt;/dependencies>\n\n&lt;/project>\n\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556573.YML\nserver:\n  port: 8001\n\nspring:\n  application:\n    name: cloud-provider-hystrix-payment\n\neureka:\n  client:\n    register-with-eureka: true\n    fetch-registry: true\n    service-url:\n      #defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka\n      defaultZone: http://eureka7001.com:7001/eureka\n\n12345678910111213144.主启动\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\n\n/**\n */\n@SpringBootApplication\n@EnableEurekaClient\npublic class PaymentHystrixMain8001\n&#123;\n    public static void main(String[] args) &#123;\n            SpringApplication.run(PaymentHystrixMain8001.class, args);\n    &#125;\n&#125;\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n5.业务类\n\nservice\n\nimport org.springframework.stereotype.Service;\n\nimport java.util.concurrent.TimeUnit;\n\n/**\n */\n@Service\npublic class PaymentService &#123;\n    /**\n     */\n    public String paymentInfo_OK(Integer id)\n    &#123;\n        return \"线程池:  \"+Thread.currentThread().getName()+\"  paymentInfo_OK,id:  \"+id+\"\\t\"+\"O(∩_∩)O哈哈~\";\n    &#125;\n\n    public String paymentInfo_TimeOut(Integer id)\n    &#123;\n        try &#123; TimeUnit.MILLISECONDS.sleep(3000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125;\n        return \"线程池:  \"+Thread.currentThread().getName()+\" id:  \"+id+\"\\t\"+\"O(∩_∩)O哈哈~\"+\"  耗时(秒): 3\";\n    &#125;\n\n&#125;\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\ncontroller\n\nimport com.lun.springcloud.service.PaymentService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.annotation.Resource;\n\n/**\n */\n@RestController\n@Slf4j\npublic class PaymentController\n&#123;\n    @Resource\n    private PaymentService paymentService;\n\n    @Value(\"$&#123;server.port&#125;\")\n    private String serverPort;\n    \n    @GetMapping(\"/payment/hystrix/ok/&#123;id&#125;\")\n    public String paymentInfo_OK(@PathVariable(\"id\") Integer id)\n    &#123;\n        String result = paymentService.paymentInfo_OK(id);\n        log.info(\"*****result: \"+result);\n        return result;\n    &#125;\n    \n    @GetMapping(\"/payment/hystrix/timeout/&#123;id&#125;\")\n    public String paymentInfo_TimeOut(@PathVariable(\"id\") Integer id)\n    &#123;\n        String result = paymentService.paymentInfo_TimeOut(id);\n        log.info(\"*****result: \"+result);\n        return result;\n    &#125;\n\n&#125;\n\n123456789101112131415161718192021222324252627282930313233343536376.正常测试\n启动eureka7001\n启动cloud-provider-hystrix-payment8001\n访问\nsuccess的方法 - http://localhost:8001/payment/hystrix/ok/1每次调用耗费5秒钟 - http://localhost:8001/payment/hystrix/timeout/1\n上述module均OK\n以上述为根基平台，从正确 -&gt; 错误 -&gt; 降级熔断 -&gt; 恢复。\n51_JMeter高并发压测后卡顿上述在非高并发情形下，还能勉强满足\nJmeter压测测试\nJMeter官网\nThe Apache JMeter™ application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. It was originally designed for testing Web Applications but has since expanded to other test functions.\n开启Jmeter，来20000个并发压死8001，20000个请求都去访问paymentInfo_TimeOut服务\n1.测试计划中右键添加-》线程-》线程组（线程组202102，线程数：200，线程数：100，其他参数默认）\n2.刚刚新建线程组202102，右键它-》添加-》取样器-》Http请求-》基本 输入http://localhost:8001/payment/hystrix/ok/1\n3.点击绿色三角形图标启动。\n看演示结果：拖慢，原因：tomcat的默认的工作线程数被打满了，没有多余的线程来分解压力和处理。\nJmeter压测结论\n上面还是服务提供者8001自己测试，假如此时外部的消费者80也来访问，那消费者只能干等，最终导致消费端80不满意，服务端8001直接被拖慢。\n52_订单微服务调用支付服务出现卡顿看热闹不嫌弃事大，80新建加入\n1.新建 - cloud-consumer-feign-hystrix-order80\n2.POM\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    &lt;parent>\n        &lt;artifactId>LearnCloud&lt;/artifactId>\n        &lt;groupId>com.lun.springcloud&lt;/groupId>\n        &lt;version>1.0.0-SNAPSHOT&lt;/version>\n    &lt;/parent>\n    &lt;modelVersion>4.0.0&lt;/modelVersion>\n\n    &lt;artifactId>cloud-consumer-feign-hystrix-order80&lt;/artifactId>\n    \n    &lt;dependencies>\n        &lt;!--openfeign-->\n        &lt;dependency>\n            &lt;groupId>org.springframework.cloud&lt;/groupId>\n            &lt;artifactId>spring-cloud-starter-openfeign&lt;/artifactId>\n        &lt;/dependency>\n        &lt;!--hystrix-->\n        &lt;dependency>\n            &lt;groupId>org.springframework.cloud&lt;/groupId>\n            &lt;artifactId>spring-cloud-starter-netflix-hystrix&lt;/artifactId>\n        &lt;/dependency>\n        &lt;!--eureka client-->\n        &lt;dependency>\n            &lt;groupId>org.springframework.cloud&lt;/groupId>\n            &lt;artifactId>spring-cloud-starter-netflix-eureka-client&lt;/artifactId>\n        &lt;/dependency>\n        &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity -->\n        &lt;dependency>\n            &lt;groupId>com.lun.springcloud&lt;/groupId>\n            &lt;artifactId>cloud-api-commons&lt;/artifactId>\n            &lt;version>$&#123;project.version&#125;&lt;/version>\n        &lt;/dependency>\n        &lt;!--web-->\n        &lt;dependency>\n            &lt;groupId>org.springframework.boot&lt;/groupId>\n            &lt;artifactId>spring-boot-starter-web&lt;/artifactId>\n        &lt;/dependency>\n        &lt;dependency>\n            &lt;groupId>org.springframework.boot&lt;/groupId>\n            &lt;artifactId>spring-boot-starter-actuator&lt;/artifactId>\n        &lt;/dependency>\n        &lt;!--一般基础通用配置-->\n        &lt;dependency>\n            &lt;groupId>org.springframework.boot&lt;/groupId>\n            &lt;artifactId>spring-boot-devtools&lt;/artifactId>\n            &lt;scope>runtime&lt;/scope>\n            &lt;optional>true&lt;/optional>\n        &lt;/dependency>\n        &lt;dependency>\n            &lt;groupId>org.projectlombok&lt;/groupId>\n            &lt;artifactId>lombok&lt;/artifactId>\n            &lt;optional>true&lt;/optional>\n        &lt;/dependency>\n        &lt;dependency>\n            &lt;groupId>org.springframework.boot&lt;/groupId>\n            &lt;artifactId>spring-boot-starter-test&lt;/artifactId>\n            &lt;scope>test&lt;/scope>\n        &lt;/dependency>\n    &lt;/dependencies>\n\n&lt;/project>\n\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263643.YML\nserver:\n  port: 80\n\neureka:\n  client:\n    register-with-eureka: false\n    service-url:\n      defaultZone: http://eureka7001.com:7001/eureka/\n\n1234567894.主启动\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.hystrix.EnableHystrix;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n/**\n */\n@SpringBootApplication\n@EnableFeignClients\n//@EnableHystrix\npublic class OrderHystrixMain80\n&#123;\n    public static void main(String[] args)\n    &#123;\n        SpringApplication.run(OrderHystrixMain80.class,args);\n    &#125;\n&#125;\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n5.业务类\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\n\n/**\n */\n@Component\n@FeignClient(value = \"CLOUD-PROVIDER-HYSTRIX-PAYMENT\" /*,fallback = PaymentFallbackService.class*/)\npublic interface PaymentHystrixService\n&#123;\n    @GetMapping(\"/payment/hystrix/ok/&#123;id&#125;\")\n    public String paymentInfo_OK(@PathVariable(\"id\") Integer id);\n\n    @GetMapping(\"/payment/hystrix/timeout/&#123;id&#125;\")\n    public String paymentInfo_TimeOut(@PathVariable(\"id\") Integer id);\n\n&#125;\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nimport com.lun.springcloud.service.PaymentHystrixService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.annotation.Resource;\n\n@RestController\n@Slf4j\npublic class OrderHystirxController &#123;\n    @Resource\n    private PaymentHystrixService paymentHystrixService;\n\n    @GetMapping(\"/consumer/payment/hystrix/ok/&#123;id&#125;\")\n    public String paymentInfo_OK(@PathVariable(\"id\") Integer id)\n    &#123;\n        String result = paymentHystrixService.paymentInfo_OK(id);\n        return result;\n    &#125;\n    \n    @GetMapping(\"/consumer/payment/hystrix/timeout/&#123;id&#125;\")\n    public String paymentInfo_TimeOut(@PathVariable(\"id\") Integer id) &#123;\n        String result = paymentHystrixService.paymentInfo_TimeOut(id);\n        return result;\n    &#125;\n\n&#125;\n\n1234567891011121314151617181920212223242526276.正常测试\nhttp://localhost/consumer/payment/hystrix/ok/1\n7.高并发测试\n2W个线程压8001\n消费端80微服务再去访问正常的Ok微服务8001地址\nhttp://localhost/consumer/payment/hystrix/ok/32\n消费者80被拖慢\n原因：8001同一层次的其它接口服务被困死，因为tomcat线程池里面的工作线程已经被挤占完毕。\n正因为有上述故障或不佳表现才有我们的降级&#x2F;容错&#x2F;限流等技术诞生。\n53_降级容错解决的维度要求超时导致服务器变慢(转圈) - 超时不再等待\n出错(宕机或程序运行出错) - 出错要有兜底\n解决：\n对方服务(8001)超时了，调用者(80)不能一直卡死等待，必须有服务降级。对方服务(8001)down机了，调用者(80)不能一直卡死等待，必须有服务降级。对方服务(8001)OK，调用者(80)自己出故障或有自我要求(自己的等待时间小于服务提供者)，自己处理降级。54_Hystrix之服务降级支付侧fallback降级配置 - @HystrixCommand\n8001先从自身找问题\n设置自身调用超时时间的峰值，峰值内可以正常运行，超过了需要有兜底的方法处埋，作服务降级fallback。\n8001fallback\n业务类启用 - @HystrixCommand报异常后如何处理\n—旦调用服务方法失败并抛出了错误信息后，会自动调用@HystrixCommand标注好的fallbackMethod调用类中的指定方法\n@Servicepublic class PaymentService{\n@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeOutHandler&quot;/*指定善后方法名*/,commandProperties = &#123;\n        @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value=&quot;3000&quot;)\n&#125;)\npublic String paymentInfo_TimeOut(Integer id)\n&#123;\n    //int age = 10/0;\n    try &#123; TimeUnit.MILLISECONDS.sleep(5000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125;\n    return &quot;线程池:  &quot;+Thread.currentThread().getName()+&quot; id:  &quot;+id+&quot;\\t&quot;+&quot;O(∩_∩)O哈哈~&quot;+&quot;  耗时(秒): &quot;;\n&#125;\n\n//用来善后的方法\npublic String paymentInfo_TimeOutHandler(Integer id)\n&#123;\n    return &quot;线程池:  &quot;+Thread.currentThread().getName()+&quot;  8001系统繁忙或者运行报错，请稍后再试,id:  &quot;+id+&quot;\\t&quot;+&quot;o(╥﹏╥)o&quot;;\n&#125;\n\n}1234567891011121314151617181920上面故意制造两种异常:\nint age &#x3D; 10&#x2F;0，计算异常我们能接受3秒钟，它运行5秒钟，超时异常。当前服务不可用了，做服务降级，兜底的方案都是paymentInfo_TimeOutHandler\n主启动类激活\n添加新注解@EnableCircuitBreaker\nimport org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;\n@SpringBootApplication@EnableEurekaClient@EnableCircuitBreaker&#x2F;&#x2F;添加到此处public class PaymentHystrixMain8001{    public static void main(String[] args) {            SpringApplication.run(PaymentHystrixMain8001.class, args);    }}1234567891011121355_Hystrix之服务降级订单侧fallback80订单微服务，也可以更好的保护自己，自己也依样画葫芦进行客户端降级保护\n题外话，切记 - 我们自己配置过的热部署方式对java代码的改动明显\n但对@HystrixCommand内属性的修改建议重启微服务\nYML\nserver:  port: 80\neureka:  client:    register-with-eureka: false    service-url:      defaultZone: http://eureka7001.com:7001/eureka/\n#开启feign:  hystrix:    enabled: true12345678910111213主启动\nimport org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.hystrix.EnableHystrix;import org.springframework.cloud.openfeign.EnableFeignClients;\n@SpringBootApplication@EnableFeignClients@EnableHystrix&#x2F;&#x2F;添加到此处public class OrderHystrixMain80{\npublic static void main(String[] args)&#123;\n    SpringApplication.run(OrderHystrixMain80.class,args);\n&#125;\n\n}\n123456789101112131415业务类\nimport com.lun.springcloud.service.PaymentHystrixService;import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;import com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;import lombok.extern.slf4j.Slf4j;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RestController;\nimport javax.annotation.Resource;\n@RestController@Slf4jpublic class OrderHystirxController {    @Resource    private PaymentHystrixService paymentHystrixService;\n@GetMapping(\"/consumer/payment/hystrix/timeout/&#123;id&#125;\")\n@HystrixCommand(fallbackMethod = \"paymentTimeOutFallbackMethod\",commandProperties = &#123;\n        @HystrixProperty(name=\"execution.isolation.thread.timeoutInMilliseconds\",value=\"1500\")\n&#125;)\npublic String paymentInfo_TimeOut(@PathVariable(\"id\") Integer id) &#123;\n    //int age = 10/0;\n    String result = paymentHystrixService.paymentInfo_TimeOut(id);\n    return result;\n&#125;\n\n//善后方法\npublic String paymentTimeOutFallbackMethod(@PathVariable(\"id\") Integer id)&#123;\n    return \"我是消费者80,对方支付系统繁忙请10秒钟后再试或者自己运行出错请检查自己,o(╥﹏╥)o\";\n&#125;\n\n}\n","slug":"spring-boot","date":"2022-05-08T06:46:00.597Z","categories_index":"JAVA","tags_index":"JAVA,Spring Cloud","author_index":"JIACHEN"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Quick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-05-07T12:13:39.099Z","categories_index":"","tags_index":"hello,hexo","author_index":"JIACHEN"}]